<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T12:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DERE: A Task and Domain-Independent Slot Filling Framework for Declarative Relation Extraction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>October 31-November 4, 2018</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heike</forename><surname>Adel</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institut für Maschinelle</orgName>
								<orgName type="institution">Sprachverarbeitung University of Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><surname>Bostan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institut für Maschinelle</orgName>
								<orgName type="institution">Sprachverarbeitung University of Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Papay</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institut für Maschinelle</orgName>
								<orgName type="institution">Sprachverarbeitung University of Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Padó</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institut für Maschinelle</orgName>
								<orgName type="institution">Sprachverarbeitung University of Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roman</forename><surname>Klinger</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institut für Maschinelle</orgName>
								<orgName type="institution">Sprachverarbeitung University of Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">DERE: A Task and Domain-Independent Slot Filling Framework for Declarative Relation Extraction</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (System Demonstrations)</title>
						<meeting>the 2018 Conference on Empirical Methods in Natural Language Processing (System Demonstrations) <address><addrLine>Brussels; Belgium</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page" from="42" to="47"/>
							<date type="published">October 31-November 4, 2018</date>
						</imprint>
					</monogr>
					<note>42</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Most machine learning systems for natural language processing are tailored to specific tasks. As a result, comparability of models across tasks is missing and their applicability to new tasks is limited. This affects end users without machine learning experience as well as model developers. To address these limitations, we present DERE, a novel framework for declarative specification and compilation of template-based information extraction. It uses a generic specification language for the task and for data annotations in terms of spans and frames. This formalism enables the representation of a large variety of natural language processing challenges. The backend can be instantiated by different models, following different paradigms. The clear separation of frame specification and model backend will ease the implementation of new models and the evaluation of different models across different tasks. Furthermore, it simplifies transfer learning, joint learning across tasks and/or domains as well as the assessment of model generalizability. DERE is available as open-source software.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A large number of tasks in natural language pro- cessing (NLP) are information extraction (IE) tasks, such as n-ary relation extraction ( <ref type="bibr">Doddington et al., 2004;</ref><ref type="bibr">Mintz et al., 2009;</ref><ref type="bibr">Hendrickx et al., 2010)</ref>, semantic role labeling ( <ref type="bibr">Das et al., 2014</ref>) and event extraction ( <ref type="bibr">Kim et al., 2009;</ref><ref type="bibr">Doddington et al., 2004</ref>). Researchers address these tasks with a vari- ety of different model paradigms, such as support vector machines ( <ref type="bibr">Rink and Harabagiu, 2010)</ref>, con- volutional neural networks <ref type="bibr">(Collobert et al., 2011;</ref><ref type="bibr">Zeng et al., 2014</ref>) and recurrent neural networks ( <ref type="bibr">Tang et al., 2015;</ref><ref type="bibr">Nguyen et al., 2016)</ref>.</p><p>This landscape of different tasks and models gives rise to four challenges: (C1) Lack of gener- * All authors contributed equally.</p><p>alizability: Most models are tailored to a specific task or setup, making it hard to transfer lessons learned between tasks; (C2) Lack of comparabil- ity: Although benchmark datasets are available for most tasks, end-to-end evaluation typically in- cludes peripheral aspects, such as preprocessing components -thus, it is unclear to what extent re- ported improvements mark actual advances in the core models or model components; (C3) Difficulty of reusability: Given task-specific models inside complex systems, it is hard to reuse specific code or models; (C4) Difficulty of usage: Users typically have limited areas of expertise, but IE systems span a range of such areas. Thus, developers of IE tools may have trouble properly (re)training complex machine learning models, and end users without ML or CS background might even be unable to use existing tools.</p><p>To tackle these challenges, we develop the general framework DERE (Declarative Relation Extraction). It enables users to (i) specify (novel or established) IE tasks, (ii) compile models and transfer them across tasks without additional de- velopment effort, (iii) develop and evaluate models across tasks, (iv) formulate and address research questions, such as the investigation of model gen- eralizability across tasks, transfer learning, or joint learning across tasks and/or domains, and (v) verify the generalizability of models by applying them to a large variety of tasks.</p><p>DERE achieves this by providing (a) a general mechanism to declaratively specify IE tasks and (b) a shared processing framework that decouples frontend and backend. This provides an attractive shared basis for modeling tasks which are typically perceived as being very different. In this paper, we use BioNLP event extraction and aspect-based sen- timent analysis (ABSA) as examples. At the same time, the decoupling exposes accessible interfaces for different user groups (cf. Section 3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generic frame</head><p>BioNLP event extraction task</p><p>Aspect-based sentiment analysis task</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Frame 1 &lt;Regulation&gt;</head><p>Trigger: regulation Theme: IL-4 IL-4 gene regulation in general involves the nuclear factor of activated T cells (NFAT) family of transcription factors, of which NFAT1 and NFAT2 are most prominent in peripheral T cells. This toaster is very stylish. The declarative specification of a task (which we call a schema) builds upon spans and relations between spans as basic concepts which are used by essentially all IE tasks. To model n-ary relations, we propose a slot-filling scheme in which frames model n-ary relations and their arguments. <ref type="figure" target="#fig_0">Figure 1</ref> shows the general structure of frames (below) and two concrete instantiations for ABSA and BioNLP (above). Each frame is triggered (anchored) by a span, e.g., a subjective evaluating phrase like "very stylish" or a BioNLP event trigger, such as "regulation" or "involves".</p><p>Frames hold a task-specific number of typed slots, filled by relation arguments. The frames for ABSA have a slot filled by the target (aspect) of the sentiment while the frames for the BioNLP regula- tion event hold a Theme slot and an optional Cause slot. While triggers are always textual spans, slots can be filled by either spans or frames, depending on the task specification. We argue that this sim- ple setup can model most IE tasks. Note that the framework poses no theoretical restrictions to the window from which frames are extracted. Thus, it can model sentence-level, document-level as well as multi-document tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Several applications require the joint extraction of spans and relations between spans, such as the BioNLP shared task ( <ref type="bibr">Kim et al., 2009)</ref>, seman- tic role labeling ( <ref type="bibr">Das et al., 2014</ref>) or (temporal) slot filling <ref type="bibr">(Surdeanu, 2013)</ref>. However, all sys- tems we are aware of for solving these tasks are tailored to specific scenarios ( <ref type="bibr">Angeli et al., 2016;</ref><ref type="bibr">Adel et al., 2016, i.a.)</ref>. As a result, it is not straight- forward to apply them to other use cases. In con- trast, our framework is designed to be task-and domain-independent. <ref type="bibr">Clarke et al. (2012)</ref> develop an NLP component manager which combines several existing NLP tools in a pipeline. Similarly, Curran (2003) aims at a general NLP infrastructure but only reports im- plementations of non-relational sequence-tagging tasks. Examples of the few available toolkits which are intended to provide users with the possibility of automatically extracting information from text data are Jet (Java Extraction Toolkit), GATE (Gen- eral Architecture for Text Engineering, <ref type="bibr">Cunningham et al., 2013)</ref>, UIMA (Unstructured Informa- tion Management Architecture, <ref type="bibr">Ferrucci and Lally, 2004</ref>), FACTORIE <ref type="bibr">(McCallum et al., 2009)</ref> and Stanbol which integrates other NLP frameworks, e.g., <ref type="bibr">OpenNLP (Morton et al., 2005</ref>).</p><p>Stanbol and OpenNLP, however, focus on tag- ging tasks and do not provide tools for relation extraction. FACTORIE is a general approach to formulate factor graphs for arbitrary tasks. Our framework takes arbitrary model paradigms as a backend and is focused on IE, which enables the abstraction layers introduced earlier. Jet, on the other hand, is an IE engine developed specifically for the ACE task specification.</p><p>GATE is most similar to our framework in scope. It offers both a framework for programmers and an environment for language engineers and com- putational linguists. However, it is a very general framework and working with it requires both do- main and machine learning knowledge. In contrast, our framework provides end users with an interface for training models on new tasks without requiring any specific knowledge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Framework Design</head><p>Use Cases. We address the needs of the follow- ing three user groups with associated use cases: (1) Researchers/Model developers: Our framework helps researchers to formulate their models in a task-independent manner, such that they can be tested and compared across tasks. This addresses challenges C1, C2 and C3 mentioned in Section 1.  Framework Structure. <ref type="figure" target="#fig_1">Figure 2</ref> illustrates the structure of the DERE framework. It is composed of two main components: The frontend comprises the user specification of the task ("task schema"), including the types of spans and entities to be iden- tified, and the possible relations that can exist be- tween them. It manages reading corpora and anno- tation files and provides an interface for users. The backend hosts the models that make actual predic- tions for spans, frames, and slots, given the task schema, and their configurations. DERE backends follow a modular design, wherein different back- ends, using different methods for prediction, can be used interchangeably with minimal changes to the frontend.</p><p>Task Schemata. DERE represents all relations r ∈ R in terms of two types of entities: spans and frames. A span s ∈ S is a contiguous span of text from the input corpus. Each span has a type t ∈ T S , corresponding to the kind of entity that that span represents. The set of possible span types T S is specified by the user for the task. A frame f ∈ F represents a relationship between multiple spans or other frames. Each frame contains a number of named slots l ∈ L. These slots can each be filled by zero or more other spans or frames. The set of frame types T F , like span types, is task-specific. For each frame type, the user specifies a set of slots, and for each slot, what types of frames or spans can fill it, plus optional cardinality constraints.</p><p>We represent a task schema as an XML file. <ref type="figure">Fig- ure 3</ref> gives an example task schema file, for a sub- &lt;deREschema name="BioNLP-ST 2009" ver="0.01" auth="Klinger"&gt; &lt;spantypes&gt; &lt;span name="Protein" predict="False"/&gt; &lt;span name="Gene_expression" anchors="Gene_expression" predict="True"/&gt; &lt;span name="Binding" anchors="Binding" predict="True"/&gt; &lt;/spantypes&gt; &lt;frames&gt; &lt;frame name="Gene_expression"&gt; &lt;slot name="Theme" types="Protein" cardinality="1"/&gt; &lt;/frame&gt; &lt;frame name="Binding"&gt; &lt;slot name="Theme" types="Protein" mincardinality="0"/&gt; &lt;/frame&gt; &lt;/frames&gt; &lt;/deREschema&gt;  set of the BioNLP shared task ( <ref type="bibr">Kim et al., 2009)</ref>. Note that this specification defines a directed graph with spans and frames as vertices V = S ∪ F and relations as edges: E = R.</p><note type="other">Figure 3: A small but complete task schema for part of the BioNLP shared task. Three span types are speci- fied: Protein, Gene expression, and Binding. The latter two anchor frames of the same name. Both frames possess a single slot Theme which can be filled by Protein spans. Gene expression frames always have exactly one Theme, while Binding frames may have zero or more Themes. T1 Protein 1650 1655 IP-10 T2 Protein 951 955 PU.1 T3 Protein 1665 1670 ISG54 T4 Protein 978 992 CSF receptor T5 Binding 932 937 binds T6 Gene_expression 1634 1644 expression E1 Binding:</note><p>Data Files. Annotated data, needed for train- ing models, are provided to DERE as annotation files. We currently support annotations in the BRAT ( <ref type="bibr">Stenetorp et al., 2012</ref>) format, cf. <ref type="figure" target="#fig_3">Figure 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Proof-of-Concept System</head><p>As a proof of concept, we present the following system consisting of a pipeline of traditional NLP formalizations: First, spans relevant for the task are identified. Then, a classifier decides for each pair of relevant spans which slots of which frame they are likely to fill. Finally, a heuristic decod- ing step compiles the results into frames. <ref type="figure" target="#fig_5">Figure 5</ref> illustrates this pipeline. The proof-of-concept sys- tem only supports non-recursive structures: slots of frames cannot be filled by other frames, but must be filled by spans -i.e., the right-hand BioNLP frame from <ref type="figure" target="#fig_0">Figure 1</ref> could not be predicted in this </p><p>... migrating B2 complex contains both p50 and p55 ... implementation. Note that this is only a proof-of- concept baseline but the framework is not limited to pipeline models. In the future, we will develop joint models that can cope with recursive structures. Span Identification. We cast the span identifi- cation problem as a BIO-style sequence-labeling task that predicts the span boundaries. To model overlapping spans, we train one model per span type which outputs all spans of that type. Our proof-of-concept system uses conditional random fields (CRF, <ref type="bibr">Lafferty et al., 2001</ref>). The feature set consists of the lower-cased words, their stems, their shape (orthographic case, digits, punctuation), and a flag indicating whether the word is included in a task-specific gazetteer. All features (except the last one) are applicable to any NLP task. The gazetteer feature is based on a simple lexicon of label-specific words (e.g., positive words for detect- ing positive spans for sentiment analysis) and can be instantiated without any technical knowledge.</p><p>Slot Classification. Once the spans are identi- fied, the slot classifier is used to predict which slots of which frame they are likely to fill. We break this question down to a classification task at the level of span pairs -one anchor span representing a frame, and another span representing a potential argument. The search space is restricted to those pairs with compatible types according to the schema.</p><p>Formally, the classifier takes as input the set S of all spans identified previously, along with a task schema. For each pair (s i , s j ) ∈ S 2 of spans fol- lowing the task schema, our classifier produces as output either a single relation label r ij , or NR (no relation) 1 if the two spans are unrelated. Conceptu- ally, two spans s i and s j are related iff s i anchors a frame, and s j fills a slot in that same frame. Rela- tion labels r ij are pairs (f i , l j ) ∈ T F × L, where f i 1 We generate negative examples automatically.</p><p>is the frame type anchored by s i and l j is the slot type in f i that s j fills. This enables us to model, e.g., in the task schema in <ref type="figure">Figure 3</ref>, BINDING.THEME and GENE EXPRESSION.THEME as separate rela- tions. A linear support vector machine is used to predict the most likely relation label (or NR). Users can enable subsampling of negative examples.</p><p>As outlined in the introduction, the features we take into account are included with the aim of be- ing task-agnostic. Intra-span features are types of identified spans and the bag of words in both spans. Inter-span features take into account context. We use the bag of words of tokens between the spans, and of the tokens on the shortest path connecting the spans in a parsed dependency tree, which we assume to accurately capture the relationship ex- pressed by the slot that links the two spans. Since spans can contain multiple tokens, there can be several shortest paths between tokens from the two spans. Under the assumption that tokens in a span are closely related to each other, we select the short- est of these paths. In addition, we also use a bag of bigrams of alternating label-token sequence on that same path. Finally, we measure the length of the shortest path and the token distance.</p><p>Decoding. Once the slot classifier identifies all related span pairs, the decoding step gener- ates frames. Pairs of spans (s i , s j ) that stand in a relation r are first partitioned into equivalence classes C h according to their anchor span (i.e., (s i , s j ) ∈ C i ). It would be possible to produce one frame for each equivalence class C h , anchored by the common anchoring span s h , and with slots filled according to each span pair's relation label r. However, as equivalence classes can be arbi- trarily large, this would allow for each slot to be filled by arbitrarily many spans (as illustrated in the bottom-left of <ref type="figure" target="#fig_5">Figure 5</ref>). As the task schema might impose cardinality constraints, further processing is required to ensure that all produced frames are con- sistent with the task schema. For each equivalence class C h , we consider all possible legal frames - i.e., all frames that are consistent with the task schema and whose slots are filled according to some subset of C h . Of these legal frames, we retain all maximally-filled legal frames (see bottom-right of <ref type="figure" target="#fig_5">Figure 5</ref>).</p><p>Evaluation and Results. To prove the feasabil- ity of our proof of concept, we report results with this configuration on the 2009 BioNLP shared task, for which we re-use the original evaluation machin-  <ref type="table">Table 2</ref>: Performance of the proof-of-concept sys- tem for aspect based sentiment analysis (10-fold cross- validation on USAGE corpus).</p><p>ery. The evaluation calculates the F 1 scores for the individual frames (events in the BioNLP task) using a soft matching for trigger boundaries and approximate recursive matching. <ref type="table">Table 1</ref> provides the results of our simple system on that task. Due to the restriction of our proof of concept to non- recursive structures (cf. Section 4), we only report on the BioNLP event types where all slots are filled by spans. In comparison to the second-ranked sys- tem, which also reports results on dev ( <ref type="bibr">Buyko et al., 2009)</ref>, our performance is slightly lower (1 percent- age point less for protein catabolism, 13pp less for gene expression and phosphorylation, but 11pp more for localization). This confirms the general usability of our general method. Correspondingly, <ref type="table">Table 2</ref> provides the current re- sults of the same model on the USAGE corpus for aspect based sentiment analysis <ref type="bibr">(Klinger and Cimiano, 2014</ref>), with 10-fold crossvalidation on the En- glish subset. In comparison to previous results, our numbers are very low. Previous work showed that this is tackled by joint inference, which we did not implement yet <ref type="bibr">(Klinger and Cimiano, 2013;</ref><ref type="bibr">Yang and Cardie, 2013)</ref>. However, this proof-of-concept implementation of the same model already shows the reusability of our framework by only changing the task schema specification. It motivates and en- ables further research on reusable models across tasks with different needs.</p><p>Technical Details and Availability. The frame- work is implemented in Python, following an object-oriented design for frontend and backends to support easy interchangeability of components.</p><p>The choice of Python will also help with future in- tegration of neural network models. For the proof- of-concept backend, we use scikit-learn for fea- ture extraction and training <ref type="bibr">(Pedregosa et al., 2011</ref>) with crfsuite and liblinear. Tokenization and stem- ming is done with NLTK ( <ref type="bibr">Loper and Bird, 2002</ref>), dependency features are extracted with spacy <ref type="bibr">(Honnibal and Johnson, 2015)</ref> and dependency graphs are stored and processed using NetworkX <ref type="bibr">(Schult, 2008)</ref>. The code is available under the Apache 2.0 License. <ref type="bibr">2</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion and Future Work</head><p>This paper presented DERE, a general framework for declarative specification and compilation of template-based slot filling. It addresses the needs of three groups of users: backend model developers, developers of information extraction tools for new use cases and end users of information extraction tools. vEspecially, it simplifies the evaluation and comparison of new information extraction models across tasks as well as the straightforward appli- cation of existing models to new tasks. By our general design of spans and frames, it is possible to apply DERE to a large variety of natural language processing tasks, such as unary, binary and n-ary relation extraction, event extraction, semantic role labeling, aspect-based sentiment analysis, etc.</p><p>As BRAT annotations are not as expressive as our task schema files, we plan to extend the fron- tend of DERE by supporting a native, XML-based annotation format in the future. For the backend, our goal is to develop a variety of state-of-the-art models with joint span identification, slot classifi- cation, and frame decoding, e.g., neural networks with structured-prediction output layers ( <ref type="bibr">Lample et al., 2016;</ref><ref type="bibr">Adel and Schütze, 2017, i.a.</ref>). Given a variety of different models and tasks, we will be able to address interesting research questions, such a transfer learning and joint learning across tasks and domains. We plan to further analyze the usage of DERE and the possibilities it provides for inte- grating different model types and configurations in a multi-task oriented shared task.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Example formalizations of two different tasks in terms of frames, slots, and spans.</figDesc><graphic url="image-1.png" coords="2,136.30,197.32,68.47,64.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Structure of the DERE framework.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>T5 Theme:T2 Theme2:T4 E2 Gene_expression:T6 Theme:T1 E3 Gene_expression:T6 Theme:T3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: An example annotation in BRAT format, following the task specification from Figure 3. The textbound annotations T are the span annotations, the event annotations E define our frames.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Proof-of-concept pipeline: span identification (1), slot classification (2), and decoding into frames (3). : frame anchors (triggers)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>2) Developers of IE tools for a new use case: Our framework provides a common interface to models previously developed for other tasks. Those mod-</figDesc><table>Frontend: 
Backend: 

Task schema 
XML 

Annotation Data 
(BRAT/XML) 

Text Data 

XML schema 

basis for 

annotates 

defines 
Baseline model 
Configuration 

. . . 

Other model 
e.g. graphical model, 
deep learning model 

Configuration 

High-level configuration 

</table></figure>

			<note place="foot" n="2"> http://www.ims.uni-stuttgart.de/ forschung/ressourcen/werkzeuge/DeRE.en. html</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head><p>H Adel, B Roth, and H Schütze. 2016. Comparing con- volutional neural networks to traditional models for slot filling. In NAACL-HLT. </p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
