<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T10:43+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Significance of an Accurate Sandhi-Splitter in Shallow Parsing of Dravidian Languages</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>August 7-12, 2016. 2016</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Devadath</forename><forename type="middle">V</forename></persName>
							<email>devadathv.v@research.iiit.ac.in</email>
							<affiliation key="aff0">
								<orgName type="department">Language Technology Research Centre International Institute of Information Technology -Hyderabad</orgName>
								<address>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Dipti</surname></persName>
							<email>dipti@iiit.ac.in</email>
							<affiliation key="aff0">
								<orgName type="department">Language Technology Research Centre International Institute of Information Technology -Hyderabad</orgName>
								<address>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Misra</forename><surname>Sharma</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Language Technology Research Centre International Institute of Information Technology -Hyderabad</orgName>
								<address>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Significance of an Accurate Sandhi-Splitter in Shallow Parsing of Dravidian Languages</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics-Student Research Workshop</title>
						<meeting>the 54th Annual Meeting of the Association for Computational Linguistics-Student Research Workshop <address><addrLine>Berlin, Germany</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="37" to="42"/>
							<date type="published">August 7-12, 2016. 2016</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper evaluates the challenges involved in shallow parsing of Dravidian languages which are highly agglutinative and morphologically rich. Text processing tasks in these languages are not trivial because multiple words concatenate to form a single string with morpho-phonemic changes at the point of concatenation. This phenomenon known as Sandhi, in turn complicates the individual word identification. Shallow parsing is the task of identification of correlated group of words given a raw sentence. The current work is an attempt to study the effect of Sandhi in building shallow parsers for Dravidian languages by evaluating its effect on Malay-alam, one of the main languages from Dra-vidian family. We provide an in-depth analysis of effect of Sandhi in developing a robust shallow parser pipeline with experimental results emphasizing on how sensitive the individual components of shallow parser are, towards the accuracy of a sandhi splitter. Our work can serve as a guiding light for building robust text processing systems in Dravidian languages.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Identification of individual words is crucial for the computational processing of a text. In Dravid- ian languages, word identification becomes com- plex because of Sandhi. Sandhi is a phenomenon of concatenation of multiple words or characters to form a single complex string, with morpho- phonemic changes at the points of concatena- tion <ref type="bibr" target="#b8">(VV et al., 2014</ref>). The morphological units that can be concatenated in a Sandhi operation can belong to any linguistic class: a noun joins with a verb or a postposition or particle, a verb joins with other verbs, auxiliaries, connectives, adverbs combining with verbs and so on. The phenomenon is different from a noun compound multi-word expression in that the noun-compound concate- nations are semantics-driven. Whereas Sandhi is not semantically driven but phonologically driven. This leads to misclassification of classes of words by pos-tagger which eventually affects parsing. Hence making shallow parsers for Dravidian lan- guages is a challenging task.</p><p>Shallow parsing <ref type="bibr" target="#b0">(Abney, 1992</ref>) is a task of au- tomatic identification of correlated group of words (chunks) which reduces the computational effort at the level of full parsing by assigning partial structure to a sentence. To be precise, chunks are correlated group of words which contain only the head or content word and its modifiers. Shal- low parser is not a single module but is a set of modules ( <ref type="bibr" target="#b4">Hammerton et al., 2002</ref>) with tokeniser, parts-of-speech tagger (pos-tagger) and chunker put in a pipeline. It has been experimentally proved that shallow parsers are useful in both text <ref type="bibr" target="#b3">(Collins, 1996)</ref>, <ref type="bibr" target="#b2">(Buchholz and Daelemans, 2001)</ref> and speech processing domains <ref type="bibr" target="#b9">(Wahlster, 2013)</ref>.</p><p>The current work aims to give an in-depth anal- ysis on the effect of Sandhi in shallow parsing of Dravidian languages with a focus on Malay- alam, the most agglutinative language ( <ref type="bibr" target="#b7">Sankaran and Jawahar, 2013</ref>) in the Dravidian family. For the purpose of analysis, we chose to create our own pos-tagger and chunker trained on a new 70k words annotated corpus with word internal features of morpho-phonological nature partic- ularly because Sandhi evolved out of morpho- phonological reasons.</p><p>In this paper, for the first time in the literature, we evaluate the impact of Sandhi and the resul- tant error propagation in shallow parser for Dra- vidian languages. In this work, we compare the performances of pos-tagger, and chunker on a gold standard sandhi-split test data and how the error of a sandhi-splitting tool propagates to other com- ponents of shallow parsing pipeline. We have re- leased the 70k annotated data and the trained mod- els of pos-agger, chunker and shallow parser de- scribed in this paper 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Sandhi in Dravidian languages</head><p>Sandhi is a very common phenomenon in Sanskrit and Dravidian languages. Even though many languages exhibit agglutinative properties in morphemes, in these languages, this goes beyond the morphemes and agglutinates words with morpho-phonemic change. For example,</p><p>(1) avanaareyaaN snEhikkunnath ?</p><p>'avan aare aaN snEhikkunnath ?</p><p>'he whom is loving ? 'whom he is loving?</p><p>Example 1 is a valid sentence from Malayalam. There are two strings, avanaareyaaN and snE- hikkunnath. Here second string is a single word but first string, avanaareyaaN is a combination of 3 sub-strings or words; avan , aare and aaN. The last character "n " of avan is a pure consonant which can stand alone without the help of a vowel. When this word joins with the next word aare, "n " of avan becomes a normal consonant by joining with the first character "aa" of aare. When aare joins with the word aaN, an insertion of an additional character "y" happens, and together they form avanaareyaaN.</p><formula xml:id="formula_0">avan + aare + aaN â†’ avanaareyaaN</formula><p>Sandhi happens in Dravidian languages at two levels. One is at morpheme level and other is at word level. In morpheme level, stem or root(s) join with the affixes to create a word along with morpho-phonemic changes as explained above. This is considered as Internal Sandhi. Sandhi between words as in example <ref type="formula">(1)</ref> is known as External Sandhi. For this work, External Sandhi is the matter of concern because this makes the individual word identification difficult.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Sandhi-Splitter</head><p>Sandhi-splitter is a tool which splits a string of conjoined words into a sequence of individual words, where each word in the sequence has the capacity to stand alone as a single word. To be precise, sandhi-splitter facilitates the task of indi- vidual word identification within such a string of conjoined words.</p><p>To the best of our knowledge, only 2 works have been published on Malayalam sandhi-splitter with proper empirical results <ref type="bibr" target="#b8">(VV et al., 2014</ref>), <ref type="bibr" target="#b5">(Kuncham et al., 2015)</ref>. For all the experiments, we used the former sandhi splitter since the accuracy is better than the latter one. This method applies Bayesian methods at character level to find out the precise split points and used hand-crafted rules to induce morpho-phonemic changes. The remaining sections of this paper focus on an in-depth analy- sis of effect of Sandhi in shallow parsing in the language of Malayalam.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Effect of Sandhi in Shallow Parsing</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">An overview of Shallow Parser pipeline</head><p>A typical architecture of a shallow parser has three main modules namely sandhi-splitter, pos-tagger and chunker. Input to the shallow parser is a raw sentence and the output is a chunked text with its pos and chunk information of every word present in it. The diagram of the architecture is given in <ref type="figure" target="#fig_0">Figure 1</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Effect of Sandhi in POS-Tagging</head><p>As mentioned in Section 1, Sandhi happens be- tween words from different grammatical cate- gories.</p><p>(2) addEhamoraddhyaapakanaaN 'addEhaM oru addhyaapakan aaN 'He one teacher(male) is 'He is a teacher Example 2 is a sentence in Malayalam with 4 words in it. Here first word addEhaM is a pro- noun, second word oru is quantifier, third word addhyaapakan is a noun and fourth word aaN is a copula. But these words are agglutinated to become a string of words addEhamoraddhyaa- pakanaaN, making the system incapable of identi- fying individual words, consequently resulting in an erroneous POS tagging.</p><formula xml:id="formula_1">(3) varumen kil 'varuM en kil ' 'come.FUT if' 'if comes'</formula><p>In example 3, there are 2 different words from different grammatical classes. varuM is a finite verb whereas en kil is a conjunction and they are agglutinated together to form varumen kil which should not be tagged by a single pos-tag.</p><p>Because of the morphological richness, mor- phological features like root, prefix and suffix in- formation are helpful features in identifying the grammatical category of a word. In order to eval- uate the effect of Sandhi we decided to create a pos-tagger which uses both word-external (con- text) and word-internal features (morphological features) because a word is a result of Sandhi be- tween morphemes like prefix, suffix, root, stem etc. For incorporating these features we used CRF ( <ref type="bibr" target="#b6">Lafferty et al., 2001</ref>) for building pos-tagger. We created a pos-annotated news corpus of 70k words by manual efforts along with bootstrapping. The pos information is incorporated after splitting and validating the Sandhi. The Tag-set we used to annotate is BIS tag-set 2 , specially designed for Indian languages. Since morph analyzers are not available for Malayalam, in order to capture the prefix and suffix information, certain number of characters from the beginning and end of a word are used as features for POS Tagging. <ref type="table" target="#tab_0">Table 1</ref> shows the features used for pos-tagging.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Effect of Sandhi in Chunking</head><p>Chunks are identified based on the pos-tags of words. Since a chunk is a group of a head word and its modifiers, they are meaningful subsets of a sentence. But if the individual words are not correctly identified, inappropriate pos-tags will be assigned and meaningless chunks will be created. There are 4 words and 3 chunks in example 2. <ref type="bibr">[addEhaM PRP]</ref></p><note type="other">NP, [oru QT addhyaapakan NN]NP, and [aaN VM]VP. If the Sandhi is not identified and individual words are not extracted, system will fail to identify the meaningful sub-parts of a sentence like chunk/phrase/constituents. Sim- ilarly in example 3, the string varumen kil has two words and two chunks [varuM VM]VP and [en kil CC]CCP. Hence processing Sandhi in</note><p>the first stage is extremely important in any NLP task for Dravidian languages.</p><p>For evaluating the effect of Sandhi in chun- ker, we decided to create a chunker. We incorpo- rated chunk information using IIIT-tagset <ref type="bibr" target="#b1">(Bharati, 2006</ref>) in the data annotated for pos-tagging, which is a corpus of 70k words. <ref type="table" target="#tab_1">Table 2</ref> shows the fea- tures we used for the chunker. Each feature is composed of a word and its corresponding POS tag.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">End to End Shallow parser</head><p>Shallow parser is a set of modules comprising of sandhi-splitter, pos-tagger and chunker in order. A raw text will be given as the input and the sandhi- splitter identifies individual words, pos-tagger as- signs pos-tags to each word and chunker groups them to chunks and outputs the chunked sentence as shown in <ref type="figure" target="#fig_2">Figure 2</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Data</head><p>We have used the manually created 70k pos and chunk annotated corpus which we have already mentioned in 4.2 and 4.3. Out of 70k data, 8k data has been taken as test data and remaining 62k as training data for pos-tagging and chunking. Since creating training data for sandhi-splitter is a labo- rious task, we used the sandhi-annotated training data of size 2k words used by <ref type="bibr" target="#b8">(VV et al., 2014</ref>). Whereas test data will be the same 8k data which were employed for pos tagging and chunking.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Experiments</head><p>Two types of experiments have been conducted to evaluate the error propagation of the Malayalam shallow parser pipeline. In the first type of experi- ments, individual modules in the pipeline are con- sidered as independent of the output of previous modules. In the second type of experiment indi- vidual modules are considered as dependent on the output of previous modules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Experiment Type -1</head><p>In this experiment, input to each module will not be affected by the performance of its previous modules. This experiment evaluates the perfor- mance of all the individual modules with respect to the current train and test data.  <ref type="table" target="#tab_2">Table 3</ref>: Results of Experiment Type-1 : Re- sults of individual modules where each module will not be affected by the performance of its pre- vious modules. Here, 'P' refers to Precision, 'R' to Recall, 'F-1' to F-Measure and 'A' to Accuracy</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Experiment Type -2</head><p>In these experiments, output of one module will be given as input to the next module, hence the per- formance of the previous module affects the next module. These experiments are to evaluate the er- ror propagation from each module which eventu- ally affects the final output. Here the evaluation of the pos-tagger is done based on the number of words which got correctly identified by the sandhi- splitter and then got the correct pos-tags by the pos-tagger. A chunk can be a word or a group of words. Hence a chunk is considered as correct only when there are exact number of words in the chunk where all the words in it should meet the criteria for the evaluation of pos-tagger. Shallow Parser pipeline evaluation scores are given in <ref type="table">Ta- ble 4.</ref> S S+P P+C S+P+C 88.46 79.87 81.88 71.38 <ref type="table">Table 4</ref>: Results of Experiment Type-2: Pipeline accuracies where the performance of previous modules affect the subsequent modules. Here 'S' refers to sandhi splitter, 'P' to pos-tagger and 'C' to chunker. "+" indicates that the output of the previous module is given as the input to the next module. Error propagation due to the performance of sandhi-splitter is very high when compared to other modules. Accuracy of the pos-tagger, came down to 79% from 90% due to the errors caused by sandhi-splitter and further this brought down the accuracy of chunker to 71% from 92%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Analysis of Experiment Type-2 Results</head><p>In Various Modules</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Sandhi-Splitter</head><p>We have 2 types of errors created by the sandhi splitter.</p><p>1. Not splitting a token which has to be split into words.</p><p>2. Splitting a token which should not have been split.</p><p>In this experiment, error 1 is more prevalent than error 2. For example, aRivilla (no knowledge) should have been split into aRiv (knowledge) and illa (no). But the system failed to do so. The mentioned problem is due to the lack of diverse patterns in training data. When it comes to error 2, split occurs either between a root and its suffix or just splits in common sandhi split points like ya, va or ma. The word aTiccamaRtti (suppressed) got split into aTiccaM and aRtti where both the words are meaningless. This problem is also due to the lack of diverse patterns in training data. Another cause of errors are rules employed in Sandhi Splitter for inducing morpho-phonemic changes after split. Though the system correctly identified "n" as split point for kaalinuLLa (which is for leg), but when the rules got applied, this became kaalin +uLLa, where it should have been simply "n" which represents a dative case suffix. Whereas kaalin which is meaningless in that context.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">POS-Tagger</head><p>The errors in sandhi splitting will eventually affect the performance of pos-tagger in two ways along with sole errors created by pos tagger. Precisely the errors from sandhi splitter has been propagated to pos-tagger, along with errors from pos-tagger. Since it is in a pipeline, wrongly split tokens given to the pos-tagger will have unknown patterns which make the system unable to predict the tag accurately since the pos-tagger uses the morphological features defined based on characters. Subsequently, this will have an impact at the word level context as well. One such instance is where the string raajaavaaN (is king) got split into raajaa and aaN, where it should have been raajaav and aaN.</p><p>Here raajaa (king) got tagged as adjective and aaN (is) ideally a verb but got tagged as a noun, since the previous word got tagged as an adjective.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Chunker</head><p>Errors from both sandhi-splitter and pos-tagger affect the performance of chunker. Errors to- gether from sandhi-splitter and pos-tagger have been propagated to chunker. A chunk is tagged as incorrect when the words and number of words along with their respective pos-tags are not cor- rect. Many instances have 2 or more words per chunk and the chunk-tag is decided based on pos- tags of words. Since it is in a pipeline, two types of errors can propagate,</p><p>â€¢ Errors due to unidentified or wrongly identi- fied words from sandhi-splitter.</p><p>â€¢ Errors from pos-tagger, which was affected or unaffected by the errors from sandhi- splitter.</p><p>There are many instances where sandhi-splitter could not identify individual words from a token like aRivilla (no knowledge). Ideally aRiv and illa, where the first word is a noun and the other is a verb. Hence there should be a noun chunk (NP) and a verb chunk (VP). Since individual words are not available, pos-tags and chunk-tags will be wrongly identified. Similar would be the case of wrongly identified words.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Works</head><p>In this work we have discussed about experiments conducted to evaluate the significance of an accu- rate sandhi-splitter in shallow parsing of Dravid- ian languages, with a focus on Malayalam. We evaluated the performance of individual modules and pipeline with gold standard sandhi-split test data and how the error of a sandhi-splitting tool propagates to other components of shallow pars- ing pipeline. From the evaluation we found that Sandhi severely affects the performance of in- dividual modules and hence the performance of shallow parser. This study validates the the need of a highly accurate sandhi-splitter for all Dravid- ian languages. As a future work, we propose to work in three main directions.</p><p>1. In order to reduce the error propagation in pipelined Shallow parser, joint modeling of a shallow parser is proposed.</p><p>2. Investigating further improvements in sandhi-splitting by formulating sandhi- splitting as a statistical machine translation task, where the raw text will be given as the source language and the target language will be the sentences with individual words identified.</p><p>3. Since manual creation of annotated data in huge amount is tedious, we plan to apply cross-lingual projection techniques to create Sandhi splitter for all Dravidian languages by exploiting their morphological similarity.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Pipeline Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Features W - 2 /</head><label>2</label><figDesc>POS -2 ,..,W 0 /POS 0 ,..,W 2 /POS 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Example of a raw input and the subsequent chunked output</figDesc><graphic url="image-2.png" coords="3,307.42,603.67,219.97,63.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Comparison of accuracies of POS tagger and Chunker with and without Sandhi splitter</figDesc><graphic url="image-3.png" coords="4,307.42,300.95,226.77,143.75" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Features for our POS Tagger. W is Word 
and W[l:m] refers to character at indexes. W x 
refers to word at relative position of x with respect 
to current position. 'EOW' refers to End Of Word. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 :</head><label>2</label><figDesc>Features for our Chunker. W is Word and POS refers to POS tag.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 3 presents the results.</head><label>3</label><figDesc></figDesc><table>Module 
P 
R 
F-1 
A 
Sandhi Splitter 91.77 62.95 74.68 88.46 
POS tagger 
90.45 90.49 90.47 90.45 
Chunker 
88.47 91.55 89.98 92.92 

</table></figure>

			<note place="foot" n="1"> Data and Models created during this project can be found in this link https://github.com/Devadath/ Malayalam-Shallow-Parser</note>

			<note place="foot" n="2"> http://tinyurl.com/hhllsky</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors are grateful to Pruthwik Mishra for the invaluable help and support during the work. We also would like to thank our colleagues for their critical and invaluable comments while writ-ing the paper. This work has been done as the part of Taruviithi, a treebank creation project for Indian languages which is supported by the Department of Electronics and Information Technology (DE-ITY), India.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Parsing by chunks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stevenp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Abney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">RobertC. Berwick, StevenP. Abney, and Carol Tenny, editors, Principle-Based Parsing</title>
		<meeting><address><addrLine>Netherlands</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1992" />
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="257" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Anncorra: Annotating corpora guidelines for pos and chunk annotation for indian languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Akshar</forename><surname>Bharati</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Complex answers: A case study using a www question answering system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Buchholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Daelemans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Lang. Eng</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="301" to="323" />
			<date type="published" when="2001" />
			<publisher>December</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A new statistical parser based on bigram lexical dependencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael John</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Collins</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 34th annual meeting on Association for Computational Linguistics</title>
		<meeting>the 34th annual meeting on Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="184" to="191" />
		</imprint>
	</monogr>
	<note>Association for Computational Linguistics</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Introduction to special issue on machine learning approaches to shallow parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Hammerton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miles</forename><surname>Osborne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susan</forename><surname>Armstrong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Walter</forename><surname>Daelemans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="551" to="558" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Statistical sandhi splitter for agglutinative languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prathyusha</forename><surname>Kuncham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kovida</forename><surname>Nelakuditi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Linguistics and Intelligent Text Processing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="164" to="172" />
		</imprint>
	</monogr>
	<note>Sneha Nallani, and Radhika Mamidi</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Conditional random fields: Probabilistic models for segmenting and labeling sequence data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Lafferty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Mccallum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando Cn</forename><surname>Pereira</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Error detection in highly inflectional languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naveen</forename><surname>Sankaran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Document Analysis and Recognition (ICDAR), 2013 12th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1135" to="1139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Sandhi splitter for malayalam</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>Devadath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Litton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kurisinkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dipti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasudeva</forename><surname>Sarma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Varma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference On Natural Language Processing</title>
		<meeting>International Conference On Natural Language Processing</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>ICON</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Verbmobil: Foundations of Speech-to-Speech Translation. Artificial Intelligence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wahlster</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<publisher>Springer</publisher>
			<pubPlace>Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
