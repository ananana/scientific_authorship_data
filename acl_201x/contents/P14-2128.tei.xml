<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T10:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Punctuation Processing for Projective Dependency Parsing *</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>June 23-25 2014. 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ji</forename><surname>Ma</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yue</forename><surname>Zhang</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Singapore University of Technology and Design</orgName>
								<orgName type="institution" key="instit2">Singapore Hangzhou YaTuo Company</orgName>
								<address>
									<addrLine>358 Wener Rd</addrLine>
									<postCode>310012</postCode>
									<settlement>Hangzhou</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jingbo</forename><surname>Zhu</surname></persName>
							<email>zhujingbo@mail.neu.edu.cn</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Northeastern University</orgName>
								<address>
									<settlement>Shenyang</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Punctuation Processing for Projective Dependency Parsing *</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics</title>
						<meeting>the 52nd Annual Meeting of the Association for Computational Linguistics <address><addrLine>Baltimore, Maryland, USA</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="791" to="796"/>
							<date type="published">June 23-25 2014. 2014</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Modern statistical dependency parsers assign lexical heads to punctuations as well as words. Punctuation parsing errors lead to low parsing accuracy on words. In this work, we propose an alternative approach to addressing punctuation in dependency parsing. Rather than assigning lexical heads to punctuations, we treat punctu-ations as properties of their neighbouring words, used as features to guide the parser to build the dependency graph. Integrating our method with an arc-standard parser yields a 93.06% unlabelled attachment score, which is the best accuracy by a single-model transition-based parser reported so far.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The task of dependency parsing is to identify the lexical head of each of the tokens in a string. Modern statistical parsers <ref type="bibr" target="#b8">(McDonald et al., 2005;</ref><ref type="bibr" target="#b9">Nivre et al., 2007;</ref><ref type="bibr" target="#b4">Huang and Sagae, 2010;</ref><ref type="bibr" target="#b13">Zhang and Nivre, 2011</ref>) treat all the tokens equally, as- signing lexical heads to punctuations as well as words. Punctuations arguably play an important role in syntactic analysis. However, there are a number of reasons that it is not necessary to parse punctuations:</p><p>First, the lexical heads of punctuations are not as well defined as those of words. Consequently, punctuations are not as consistently annotated in treebanks as words, making it harder to parse punctuations. For example, modern statistical parsers achieve above 90% unlabelled attachment score (UAS) on words. However, the UAS on punctuations are generally below 85%. * This work was done while the first author was visiting SUTD Moreover, experimental results showed that parsing accuracy of content words drops on sen- tences which contain higher ratios of punctuations. One reason for this result is that projective de- pendency parsers satisfy the "no crossing links" constraint, and errors in punctuations may pre- vent correct word-word dependencies from being created (see section 2). In addition, punctuations cause certain type of features inaccurate. Take va- lency features for example, previous work ( <ref type="bibr" target="#b13">Zhang and Nivre, 2011</ref>) has shown that such features are important to parsing accuracy, e.g., it may inform the parser that a verb already has two objects at- tached to it. However, such information might be inaccurate when the verb's modifiers contain punctuations.</p><p>Ultimately, it is the dependencies between words that provide useful information for real world applications. Take machine translation or information extraction for example, most systems take advantage of the head-modifier relationships between word pairs rather than word-punctuation pairs to make better predictions. The fact that most previous work evaluates parsing accuracies with- out taking punctuations into account is also largely due to this reason.</p><p>Given the above reasons, we propose an alterna- tive approach to punctuation processing for depen- dency parsing. In this method, punctuations are not associated with lexical heads, but are treated as properties of their neighbouring words.</p><p>Our method is simple and can be easily incor- porated into state-of-the-art parsers. In this work, we report results on an arc-standard transition- based parser. Experiments show that our method achieves about 0.90% UAS improvement over the greedy baseline parser on the standard Penn Tree- bank test set. Although the improvement becomes smaller as the beam width grows larger, we still achieved 93.06% UAS with a beam of width 64, which is the best result for transition-based parsers <ref type="bibr">Length 1 ∼ 20 21 − 40 41 − 60 Punc % 0 ∼ 15 15 ∼ 30 &gt; 30 0 ∼ 15 15 ∼ 30 &gt; 30 0 ∼ 15 15 ∼ 30 &gt; 30 E-F 94</ref>   <ref type="table">Table 1</ref>: Parsing accuracies. "E-F" and "MST" de- note easy-first parser and MSTparser, respectively. "A-S" and "A-S 64" denote our arc-standard parser with beam width 1 and 64, respectively. "UAS" and "UAS-p" denote word and punctuation unla- belled attachment score, respectively. " − " denotes the data set with punctuations removed.</p><p>reported so far. Our code will be available at https://github.com/majineu/Parser/Punc/A-STD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Influence of Punctuations on Parsing</head><p>In this section, we conduct a set of experiments to show the influence of punctuations on dependency parsing accuracies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Setup</head><p>We use the Wall Street Journal portion of the Penn Treebank with the standard splits: sections 02-21 are used as the training set; section 22 and sec- tion 23 are used as the development and test set, respectively. Penn2Malt is used to convert brack- eted structures into dependencies. We use our own implementation of the Part-Of-Speech (POS) tag- ger proposed by <ref type="bibr" target="#b2">Collins (2002)</ref> to tag the devel- opment and test sets. Training set POS tags are generated using 10-fold jack-knifing. Parsing ac- curacy is evaluated using unlabelled attachment score (UAS), which is the percentage of words that are assigned the correct lexical heads.</p><p>To show that the influence of punctuations on parsing is independent of specific pars- ing algorithms, we conduct experiments us- ing three parsers, each representing a different parsing methodology: the open source MST- Parser 1 <ref type="bibr" target="#b7">(McDonald and Pereira, 2006</ref>), our own re-implementation of an arc-standard transition- based parser <ref type="bibr" target="#b10">(Nivre, 2008)</ref>, which is trained us- ing global learning and beam-search ( <ref type="bibr" target="#b12">Zhang and Clark, 2008</ref>) with a rich feature set (Zhang and Nivre, 2011) 2 , and our own re-implementation of the easy-first parser <ref type="bibr" target="#b3">(Goldberg and Elhadad, 2010)</ref> with an extended feature set ( <ref type="bibr" target="#b6">Ma et al., 2013</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Punctuations and Parsing Accuracy</head><p>Our first experiment is to show that, compared with words, punctuations are more difficult to parse and to learn. To see this, we evaluate the parsing accuracies of the selected parsers on words and punctuations, separately. Results are listed in <ref type="table">Table 1</ref>, where row 2 and row 3 list the UAS of words (all excluding punctuations) on the de- velopment and test set, respectively. Row 4 and row 5 list accuracies of punctuations (all excluding words) on the development and test set, respec- tively. We can see that although all the parsers achieve above 90% UAS on words, the UAS on punctuations are mostly below 85%.</p><p>As for learning, we calculate the percentage of parameter updates that are caused by associating punctuations with incorrect heads during training of the easy-first parser <ref type="bibr">3</ref> . The result is that more than 31% of the parameter updates are caused due to punctuations, though punctuations account for only 11.6% of the total tokens in the training set.</p><p>The fact that parsers achieve low accuracies on punctuations is to some degree expected, because the head of a punctuation mark is linguistically less well-defined. However, a related problem is that parsing accuracy on words tends to drop on the sentences which contain high ratio of punc- tuations. To see this, we divide the sentences in the development set into sub-sets according the punctuation ratio (percentage of punctuations that a sentence contains), and then evaluate parsing ac- curacies on the sub-sets separately.</p><p>The results are listed in <ref type="table" target="#tab_1">Table 2</ref>. Since long sentences are inherently more difficult to parse, to make a fair comparison, we further divide the development set according to sentence lengths as shown in the first row <ref type="bibr">4</ref> . We can see that most of the cases, parsing accuracies drop on sentences with higher punctuation ratios. Note that this negative effect on parsing accuracy might be overlooked since most previous work evaluates parsing accu- racy without taking punctuations into account.</p><p>By inspecting the parser outputs, we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason that leads to this result. Take the sentence shown in <ref type="figure" target="#fig_0">Figure 1</ref> (a) for example, the word Mechanisms is a modifier of entitled according to the gold ref- erence. However, if the quotation mark, ", is in- correctly recognized as a modifier of was, due to the "no crossing links" constraint, the arc between Mechanisms and entitled can never be created.</p><p>A natural question is whether it is possible to reduce such error propagation by simply remov- ing all punctuations from parsing. Our next ex- periment aims at answering this question. In this experiment, we first remove all punctuations from the original data and then modify the dependency arcs accordingly in order to maintain word-word dependencies in the original data. We re-train the parsers on the modified training set and evaluate <ref type="bibr">4</ref> 1694 out of 1700 sentences on the development set with length no larger than 60 tokens parsing accuracies on the modified data.</p><p>Results are listed in row 6 and row 7 of <ref type="table">Table 1</ref>. We can see that parsing accuracies on the modified data drop significantly compared with that on the original data. The result indicates that by remov- ing punctuations, we lose some information that is important for dependency parsing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Punctuation as Properties</head><p>In our method, punctuations are treated as prop- erties of its neighbouring words. Such properties are used as additional features to guide the parser to construct the dependency graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Paired Punctuation</head><p>Our method distinguishes paired punctuations from other punctuations. Here paired punctuations include brackets and quotations marks, whose Penn Treebank POS tags are the following four:</p><formula xml:id="formula_0">-LRB- -RRB- " "</formula><p>The characteristics of paired punctuations include:</p><p>(1) they typically exist in pairs; (2) they serve as boundaries that there is only one dependency arc between the words inside the boundaries and the words outside. Take the sentence in <ref type="figure" target="#fig_0">Figure 1 (a)</ref> for example, the only arc cross the boundary is (Mechanisms, entitled) where entitled is the head. To utilize such boundary information, we fur- ther classify paired punctuations into two cate- gories: those that serve as the beginning of the boundary, whose POS tags are either -LRB-or ", denoted by BPUNC; and those that serve as the end of the boundary, denoted by EPUNC.</p><p>Before parsing starts, a preprocessing step is used to first attach the paired punctuations as properties of their neighbouring words, and then remove them from the sentence. In particular, unigram for p in β0, β1, β2, β3, σ0, σ1, σ2 ppunc for p in β0, β1, β2, σ0, σ1 ppunc pw, ppunc pt bigram for p, q in (σ0, β0), (σ0, β1), (σ0, β2), (σ0, σ1), (σ0, σ2) ppunc qpunc, ppunc qt, ppunc qw for p, q in (σ2, σ0), (σ1, σ0), (σ2, σ0) ppunc qt, ppunc pt qt for p, q in (σ2, σ0), (σ1, σ0), (σ0, β0) dpq ppunc pt qt <ref type="table">Table 3</ref>: Feature templates. For an element p either on σ or β of an arc-standard parser, we use p punc , p w and p t to denote the punctuation property, head word and head tag of p, respectively. d pq denotes the distance between the two elements p and q.</p><p>we attach BPUNCs to their right neighbours and EPUNCs to their left neighbours, as shown in <ref type="figure" target="#fig_0">Fig- ure 1 (b)</ref>. Note that in <ref type="figure" target="#fig_0">Figure 1 (a)</ref>, the left neigh- bour of " is also a punctuation. In such cases, we simply remove these punctuations since the exis- tence of paired punctuations already indicates that there should be a boundary. During parsing, when a dependency arc with lexical head w h is created, the property of w h is updated by the property of its left (or right) most child to keep track whether there is a BPUNC (or EPUNC) to the left (or right) side of the sub-tree rooted at w h , as shown in <ref type="figure" target="#fig_0">Figure 1 (c)</ref>. When BPUNCs and EPUNCs meet each other at w h , a PAIRED property is assigned to w h to capture that the words within the paired punctuations form a sub-tree, rooted at w h . See <ref type="figure" target="#fig_0">Figure 1 (d)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Practical Issues</head><p>It is not uncommon that two BPUNCS appear ad- jacent to each other. For example, ("Congress's Environmental Buccaneers," Sept. 18).</p><p>In our implementation, BPUNC or EPUNC prop- erties are implemented using flags. In the exam- ple, we set two flags " and ( on the word Con- grees's. When BPUNC and EPUNC meet each other, the corresponding flags are turned off. In the example, when Congrees's is identified as a modifier of Buccaneers, the " flag of Buccaneers is turned off. However, we do not assign a PAIRED property to Buccaneers since its ( flag is still on. The PAIRED property is assigned only when all the flags are turned off.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Non-Paired Punctuations</head><p>Though some types of non-paired punctuations may capture certain syntactic patterns, we do not make further distinctions between them, and treat these punctuations uniformly for simplicity.</p><p>Before parsing starts and after the preprocessing step for paired punctuations, our method employs a second preprocessing step to attach non-paired punctuations to their left neighbouring words. It is guaranteed that the property of the left neigh- bouring words of non-paired punctuations must be empty. Otherwise, it means the non-paired punc- tuation is adjacent to a paired punctuation. In such cases, the non-paired punctuation would be removed in the first processing step.</p><p>During parsing, non-paired punctuations are also passed bottom-up: the property of w h is up- dated by its right-most dependent to keep track whether there is a punctuation to the right side of the tree rooted at w h . The only special case is that if w h already contains a BPUNC property, then our method simply ignores the non-paired prop- erty since we maintain the boundary information with the highest priority.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Features</head><p>We incorporate our method into the arc-standard transition-based parser, which uses a stack σ to maintain partially constructed trees and a buffer β for the incoming words <ref type="bibr" target="#b10">(Nivre, 2008)</ref>. We design a set of features to exploit the potential of using punctuation properties for the arc-standard parser.</p><p>The feature templates are listed in <ref type="table">Table 3</ref>. In addition to the features designed for paired punctuations, such as bigram punctuation features listed in line 3 of <ref type="table">Table 3</ref>, we also design features for non-paired punctuations. For example, the dis- tance features in line 5 of <ref type="table">Table 3</ref> is used to capture the pattern that if a word w with comma property is the left modifier of a noun or a verb, the distance between w and its lexical head is often larger than 1. In other words, they are not adjacent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>Our first experiment is to investigate the effect of processing paired punctuations on parsing accu- racy. In this experiment, the method introduced in Section 3.1 is used to process paired punctua- tions, and the non-paired punctuations are left un-  <ref type="table">Table 4</ref>: Parsing accuracies on the development set. s denotes the beam width.</p><p>touched. Feature templates used in this experi- ment are those listed in the top three rows of Ta- ble 3 together with those used for the baseline arc- standard parser. Results on the development set are shown in the second column of <ref type="table">Table 4</ref>. We can see that when the beam width is set to 1, our method achieves an 0.49 UAS improvement. By comparing the out- puts of the two parsers, two types of errors made by the baseline parser are effectively corrected.</p><p>The first is that our method is able to cap- ture the pattern that there is only one depen- dency arc between the words within the paired- punctuations and the words outside, while the baseline parser sometimes creates more depen- dency arcs that cross the boundary.</p><p>The second is more interesting. Our method is able to capture that the root, w h , of the sub-tree within the paired-punctuation, such as "Mecha- nisms" in <ref type="figure" target="#fig_0">Figure 1</ref>, generally serves as a modifier of the words outside, while the baseline parser oc- casionally make w h as the head of the sentence.</p><p>As we increase the beam width, the improve- ment of our method over the baseline becomes smaller. This is as expected, since beam search also has the effect of reducing error propagation ( <ref type="bibr" target="#b14">Zhang and Nivre, 2012)</ref>, thereby alleviating the errors caused by punctuations.</p><p>In the last experiment, we examine the effect of incorporating all punctuations using the method introduced in Section 2. In this experiment, we use all the feature templates in <ref type="table">Table 3</ref> and those in the baseline parser. Results are listed in the fourth column of <ref type="table">Table 4</ref>, which shows that pars- ing accuracies can be further improved by also processing non-paired punctuations. The overall accuracy improvement when the beam width is 1 reaches 0.91%. The extra improvements mainly come from better accuracies on the sentences with comma. However, the exact type of errors that are corrected by using non-paired punctuations is more difficult to summarize.  The final results on the test set are listed in Ta- ble 5 <ref type="bibr">5</ref> . <ref type="table" target="#tab_4">Table 5</ref> also lists the accuracies of state- of-the-art transition-based parsers. In particular, "Huang 10" and "Zhang 11" denote <ref type="bibr" target="#b4">Huang and Sagae (2010)</ref> and <ref type="bibr" target="#b13">Zhang and Nivre (2011)</ref>, re- spectively. "Bohnet 12" and " <ref type="bibr">Choi 13" denote Bohnet and Nivre (2012)</ref> and <ref type="bibr" target="#b1">Choi and Mccallum (2013)</ref>, respectively. We can see that our method achieves the best accuracy for single- model transition-based parsers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion and Related Work</head><p>In this work, we proposed to treat punctuations as properties of context words for dependency parsing. Experiments with an arc-standard parser showed that our method effectively improves pars- ing performance and we achieved the best accu- racy for single-model transition-based parser.</p><p>Regarding punctuation processing for depen- dency parsing, <ref type="bibr" target="#b5">Li et al. (2010)</ref> proposed to uti- lize punctuations to segment sentences into small fragments and then parse the fragments separately. A similar approach is proposed by <ref type="bibr" target="#b11">Spitkovsky et al. (2011)</ref> which also designed a set of constraints on the fragments to improve unsupervised depen- dency parsing.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Illustration of processing paired punctuation. The property of a word is denoted by the punctuation below that word.</figDesc><graphic url="image-1.png" coords="3,100.35,62.81,396.84,113.39" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : Parsing accuracies vs punctuation ratios, on the development set</head><label>2</label><figDesc></figDesc><table>System 
E-F 
A-S 
A-S-64 MST 
Dev UAS 
91.83 90.71 
93.02 
92.56 
Test UAS 
91.75 90.34 
92.84 
92.10 
Dev UAS-p 83.20 79.69 
84.80 
84.42 
Test UAS-p 84.67 79.64 
87.80 
85.67 
Dev − UAS 90.64 89.55 
91.87 
90.11 
Test − UAS 90.40 89.33 
91.75 
89.82 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Final result on the test set. 

</table></figure>

			<note place="foot" n="1"> We trained a second order labelled parser with all the configurations set to the default value. The code is publicly available at http://sourceforge.net/projects/mstparser/ 2 Some feature templates in Zhang and Nivre (2011) involve head word and head POS tags which are not available for an arc-standard parser. Interestingly, without those features our arc-standard parser still achieves 92.84% UAS which is comparable to the 92.90% UAS obtained by the arceager parser of Zhang and Nivre (2011) 3 For the greedy easy-first parser, whether a parameter update is caused by punctuation error can be determined with no ambiguity.</note>

			<note place="foot" n="5"> The number of training iteration is determined using the development set.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We highly appreciate the anonymous reviewers for their insightful suggestions. This research was supported by the National Science Founda-tion of China (61272376; 61300097; 61100089), the Fundamental Research Funds for the Cen-tral Universities (N110404012), the research grant T2MOE1301 from Singapore Ministry of Ed-ucation (MOE) and the start-up grant SRG ISTD2012038 from SUTD.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A transitionbased system for joint part-of-speech tagging and labeled non-projective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Bohnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning</title>
		<meeting>the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning<address><addrLine>Stroudsburg, PA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2012" />
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1455" to="1465" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Transition-based dependency parsing with selectional branching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jinho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mccallum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics</title>
		<meeting>the 51st Annual Meeting of the Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Discriminative training methods for hidden markov models: theory and experiments with perceptron algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Collins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACL-02 conference on Empirical methods in natural language processing</title>
		<meeting>the ACL-02 conference on Empirical methods in natural language processing<address><addrLine>Stroudsburg, PA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2002" />
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An efficient algorithm for easy-first non-directional dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">Elhadad</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics, HLT &apos;10</title>
		<meeting><address><addrLine>Stroudsburg, PA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="742" to="750" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Dynamic programming for linear-time incremental parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liang</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenji</forename><surname>Sagae</surname></persName>
		</author>
		<editor>itors, ACL</editor>
		<imprint>
			<date type="published" when="2010-01" />
			<biblScope unit="page" from="1077" to="1086" />
			<pubPlace>Sandra Carberry, and Stephen Clark</pubPlace>
		</imprint>
		<respStmt>
			<orgName>The Association for Computer Linguistics</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Improving dependency parsing using punctuation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenghua</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wanxiang</forename><surname>Che</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ting</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IALP</title>
		<editor>Minghui Dong, Guodong Zhou, Haoliang Qi, and Min Zhang</editor>
		<imprint>
			<biblScope unit="page" from="53" to="56" />
			<date type="published" when="2010" />
			<publisher>IEEE Computer Society</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Easy-first pos tagging and dependency parsing with beam search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ji</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jingbo</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tong</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nan</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics</title>
		<meeting>the 51st Annual Meeting of the Association for Computational Linguistics<address><addrLine>Sofia, Bulgaria</addrLine></address></meeting>
		<imprint>
			<publisher>Short Papers</publisher>
			<date type="published" when="2013-08" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="110" to="114" />
		</imprint>
	</monogr>
	<note>Association for Computational Linguistics</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Online learning of approximate dependency parsing algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 11th Conference of the European Chapter of the Association for Computational Linguistics</title>
		<meeting>11th Conference of the European Chapter of the Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="81" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Online large-margin training of dependency parsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koby</forename><surname>Crammer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics, ACL &apos;05</title>
		<meeting>the 43rd Annual Meeting on Association for Computational Linguistics, ACL &apos;05<address><addrLine>Stroudsburg, PA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Maltparser: A language-independent system for data-driven dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johan</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Nilsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atanas</forename><surname>Chanev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gülsen</forename><surname>Eryigit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sandra</forename><surname>Kübler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Svetoslav</forename><surname>Marinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Marsi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Natural Language Engineering</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="95" to="135" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Algorithms for deterministic incremental dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="513" to="553" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Punctuation: Making a point in unsupervised dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valentin</forename><forename type="middle">I</forename><surname>Spitkovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hiyan</forename><surname>Alshawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Jurafsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fifteenth Conference on Computational Natural Language Learning</title>
		<meeting>the Fifteenth Conference on Computational Natural Language Learning</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Clark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing</title>
		<meeting>the 2008 Conference on Empirical Methods in Natural Language Processing<address><addrLine>Honolulu, Hawaii</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2008-10" />
			<biblScope unit="page" from="562" to="571" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Transition-based dependency parsing with rich non-local features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies</title>
		<meeting>the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies<address><addrLine>Portland, Oregon, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-06" />
			<biblScope unit="page" from="188" to="193" />
		</imprint>
	</monogr>
	<note>Association for Computational Linguistics</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Analyzing the effect of global learning and beam-search on transition-based dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The COLING 2012 Organizing Committee</title>
		<meeting><address><addrLine>Mumbai, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-12" />
			<biblScope unit="page" from="1391" to="1400" />
		</imprint>
	</monogr>
	<note>Proceedings of COLING 2012: Posters</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
