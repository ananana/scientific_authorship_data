<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T10:30+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Stanford CoreNLP Natural Language Processing Toolkit</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>June 23-24. 2014. 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
							<email>manning@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihai</forename><surname>Surdeanu</surname></persName>
							<email>msurdeanu@email.arizona.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Bauer</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jenny</forename><surname>Finkel</surname></persName>
							<email>jrfinkel@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Bethard</surname></persName>
							<email>bethard@cis.uab.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Mcclosky</surname></persName>
							<email>dmcclosky@us.ibm.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Linguistics &amp; Computer Science</orgName>
								<orgName type="department" key="dep2">Dept of Computer Science</orgName>
								<orgName type="laboratory">Computer and Information Sciences U. of Alabama at Birmingham</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">SISTA University of Arizona</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
								<orgName type="institution" key="instit4">Prismatic Inc</orgName>
								<orgName type="institution" key="instit5">IBM Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">The Stanford CoreNLP Natural Language Processing Toolkit</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations</title>
						<meeting>52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations <address><addrLine>Baltimore, Maryland USA</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="55" to="60"/>
							<date type="published">June 23-24. 2014. 2014</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We describe the design and use of the Stanford CoreNLP toolkit, an extensible pipeline that provides core natural language analysis. This toolkit is quite widely used, both in the research NLP community and also among commercial and government users of open source NLP technology. We suggest that this follows from a simple, approachable design, straightforward interfaces, the inclusion of robust and good quality analysis components , and not requiring use of a large amount of associated baggage.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This paper describe the design and development of Stanford CoreNLP, a Java (or at least JVM-based) annotation pipeline framework, which provides most of the common core natural language pro- cessing (NLP) steps, from tokenization through to coreference resolution. We describe the original design of the system and its strengths (section 2), simple usage patterns (section 3), the set of pro- vided annotators and how properties control them (section 4), and how to add additional annotators (section 5), before concluding with some higher- level remarks and additional appendices. While there are several good natural language analysis toolkits, Stanford CoreNLP is one of the most used, and a central theme is trying to identify the attributes that contributed to its success.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Original Design and Development</head><p>Our pipeline system was initially designed for in- ternal use. Previously, when combining multiple natural language analysis components, each with their own ad hoc APIs, we had tied them together with custom glue code. The initial version of the  annotation pipeline was developed in 2006 in or- der to replace this jumble with something better. A uniform interface was provided for an Annota- tor that adds some kind of analysis information to some text. An Annotator does this by taking in an Annotation object to which it can add extra infor- mation. An Annotation is stored as a typesafe het- erogeneous map, following the ideas for this data type presented by <ref type="bibr" target="#b2">Bloch (2008)</ref>. This basic archi- tecture has proven quite successful, and is still the basis of the system described here. It is illustrated in <ref type="figure" target="#fig_0">figure 1</ref>. The motivations were:</p><p>â€¢ To be able to quickly and painlessly get linguis- tic annotations for a text.</p><p>â€¢ To hide variations across components behind a common API.</p><p>â€¢ To have a minimal conceptual footprint, so the system is easy to learn.</p><p>â€¢ To provide a lightweight framework, using plain Java objects (rather than something of heav- ier weight, such as XML or UIMA's Common Analysis System (CAS) objects).</p><p>In 2009, initially as part of a multi-site grant project, the system was extended to be more easily usable by a broader range of users. We provided a command-line interface and the ability to write out an Annotation in various formats, including XML. Further work led to the system being re- leased as free open source software in 2010.</p><p>On the one hand, from an architectural perspec- tive, Stanford CoreNLP does not attempt to do ev- erything. It is nothing more than a straightforward pipeline architecture. It provides only a Java API. <ref type="bibr">1</ref> It does not attempt to provide multiple machine scale-out (though it does provide multi-threaded processing on a single machine). It provides a sim- ple concrete API. But these requirements satisfy a large percentage of potential users, and the re- sulting simplicity makes it easier for users to get started with the framework. That is, the primary advantage of Stanford CoreNLP over larger frame- works like UIMA ( <ref type="bibr" target="#b7">Ferrucci and Lally, 2004</ref>) or GATE ( <ref type="bibr" target="#b5">Cunningham et al., 2002</ref>) is that users do not have to learn UIMA or GATE before they can get started; they only need to know a little Java. In practice, this is a large and important differ- entiator. If more complex scenarios are required, such as multiple machine scale-out, they can nor- mally be achieved by running the analysis pipeline within a system that focuses on distributed work- flows (such as Hadoop or Spark). Other systems attempt to provide more, such as the UIUC Cu- rator ( <ref type="bibr" target="#b4">Clarke et al., 2012)</ref>, which includes inter- machine client-server communication for process- ing and the caching of natural language analyses. But this functionality comes at a cost. The system is complex to install and complex to understand. Moreover, in practice, an organization may well be committed to a scale-out solution which is dif- ferent from that provided by the natural language analysis toolkit. For example, they may be using Kryo or Google's protobuf for binary serialization rather than Apache Thrift which underlies Cura- tor. In this case, the user is better served by a fairly small and self-contained natural language analysis system, rather than something which comes with a lot of baggage for all sorts of purposes, most of which they are not using.</p><p>On the other hand, most users benefit greatly from the provision of a set of stable, robust, high quality linguistic analysis components, which can be easily invoked for common scenarios. While the builder of a larger system may have made over- all design choices, such as how to handle scale- out, they are unlikely to be an NLP expert, and are hence looking for NLP components that just work. This is a huge advantage that Stanford CoreNLP and GATE have over the empty tool- box of an Apache UIMA download, something addressed in part by the development of well- integrated component packages for UIMA, such as ClearTK ( <ref type="bibr" target="#b0">Bethard et al., 2014</ref>), DKPro Core ( <ref type="bibr" target="#b9">Gurevych et al., 2007)</ref>, and JCoRe ( <ref type="bibr" target="#b10">Hahn et al., 2008)</ref>. However, the solution provided by these packages remains harder to learn, more complex and heavier weight for users than the pipeline de- scribed here.</p><p>These attributes echo what Patricio <ref type="formula">(2009)</ref> ar- gued made Hibernate successful, including: (i) do one thing well, (ii) avoid over-design, and (iii) up and running in ten minutes or less! Indeed, the design and success of Stanford CoreNLP also reflects several other of the factors that Patricio highlights, including (iv) avoid standardism, (v) documentation, and (vi) developer responsiveness. While there are many factors that contribute to the uptake of a project, and it is hard to show causal- ity, we believe that some of these attributes ac- count for the fact that Stanford CoreNLP is one of the more used NLP toolkits. While we certainly have not done a perfect job, compared to much academic software, Stanford CoreNLP has gained from attributes such as clear open source licens- ing, a modicum of attention to documentation, and attempting to answer user questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Elementary Usage</head><p>A key design goal was to make it very simple to set up and run processing pipelines, from either the API or the command-line. Using the API, run- ning a pipeline can be as easy as <ref type="figure">figure 2</ref>. Or, at the command-line, doing linguistic processing for a file can be as easy as <ref type="figure">figure 3</ref>. Real life is rarely this simple, but the ability to get started us- ing the product with minimal configuration code gives new users a very good initial experience. <ref type="figure" target="#fig_1">Figure 4</ref> gives a more realistic (and complete) example of use, showing several key properties of the system. An annotation pipeline can be applied to any text, such as a paragraph or whole story rather than just a single sentence. The behavior of annotators in a pipeline is controlled by standard Java properties in a Properties object. The most basic property to specify is what annotators to run, in what order, as shown here. But as discussed be- low, most annotators have their own properties to allow further customization of their usage. If none are specified, reasonable defaults are used. Run- ning the pipeline is as simple as in the first exam- ple, but then we show two possibilities for access- ing the results. First, we convert the Annotation object to XML and write it to a file. Second, we show code that gets a particular type of informa- tion out of an Annotation and then prints it.</p><p>Our presentation shows only usage in Java, but the Stanford CoreNLP pipeline has been wrapped by others so that it can be accessed easily from many languages, including Python, Ruby, Perl, Scala, Clojure, Javascript (node.js), and .NET lan- guages, including C# and F#.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Provided annotators</head><p>The annotators provided with StanfordCoreNLP can work with any character encoding, making use of Java's good Unicode support, but the system defaults to UTF-8 encoding. The annotators also support processing in various human languages, providing that suitable underlying models or re- sources are available for the different languages. The system comes packaged with models for En- glish. Separate model packages provide support for Chinese and for case-insensitive processing of English. Support for other languages is less com- plete, but many of the Annotators also support models for French, German, and Arabic (see ap- pendix B), and building models for further lan- guages is possible using the underlying tools. In this section, we outline the provided annotators, focusing on the English versions. It should be noted that some of the models underlying annota- tors are trained from annotated corpora using su- pervised machine learning, while others are rule- based components, which nevertheless often re- quire some language resources of their own.</p><p>tokenize Tokenizes the text into a sequence of to- kens. The English component provides a PTB- style tokenizer, extended to reasonably handle noisy and web text. The corresponding com- ponents for Chinese and Arabic provide word and clitic segmentation. The tokenizer saves the character offsets of each token in the input text. cleanxml Removes most or all XML tags from the document. ssplit Splits a sequence of tokens into sentences. truecase Determines the likely true case of tokens in text (that is, their likely case in well-edited text), where this information was lost, e.g., for all upper case text. This is implemented with a discriminative model using a CRF sequence tagger ( <ref type="bibr" target="#b8">Finkel et al., 2005</ref>). pos Labels tokens with their part-of-speech (POS) tag, using a maximum entropy POS tagger ( <ref type="bibr" target="#b15">Toutanova et al., 2003)</ref>. lemma Generates the lemmas (base forms) for all tokens in the annotation. gender Adds likely gender information to names. ner Recognizes named <ref type="figure">(PERSON, LOCATION,</ref> ORGANIZATION, MISC) and numerical (MONEY, NUMBER, DATE, TIME, DU- RATION, SET) entities. With the default annotators, named entities are recognized using a combination of CRF sequence taggers trained on various corpora ( <ref type="bibr" target="#b8">Finkel et al., 2005</ref>), while numerical entities are recognized using two rule-based systems, one for money and numbers, and a separate state-of-the-art system for processing temporal expressions <ref type="bibr" target="#b3">(Chang and Manning, 2012)</ref>. regexner Implements a simple, rule-based NER over token sequences building on Java regular expressions. The goal of this Annotator is to provide a simple framework to allow a user to incorporate NE labels that are not annotated in traditional NL corpora. For example, a default list of regular expressions that we distribute in the models file recognizes ideologies (IDE- OLOGY), nationalities (NATIONALITY), reli- gions (RELIGION), and titles (TITLE). parse Provides full syntactic analysis, including both constituent and dependency representa- tion, based on a probabilistic parser ( <ref type="bibr" target="#b6">de Marneffe et al., 2006</ref>). sentiment Sentiment analysis with a composi- tional model over trees using deep learning <ref type="bibr" target="#b14">(Socher et al., 2013</ref>). Nodes of a binarized tree of each sentence, including, in particular, the root node of each sentence, are given a senti- ment score. dcoref Implements mention detection and both pronominal and nominal coreference resolution ( <ref type="bibr" target="#b12">Lee et al., 2013</ref>). The entire coreference graph of a text (with head words of mentions as nodes) is provided in the Annotation.</p><p>Most of these annotators have various options which can be controlled by properties. These can either be added to the Properties object when cre- ating an annotation pipeline via the API, or spec- ified either by command-line flags or through a properties file when running the system from the command-line. As a simple example, input to the system may already be tokenized and presented one-sentence-per-line. In this case, we wish the tokenization and sentence splitting to just work by using the whitespace, rather than trying to do any- thing more creative (be it right or wrong). This can be accomplished by adding two properties, either to a properties file:</p><p>tokenize.whitespace: true ssplit.eolonly: true in code:</p><p>/** Simple annotator for locations stored in a gazetteer. */ package org.foo; public class GazetteerLocationAnnotator implements Annotator { // this is the only method an Annotator must implement public void annotate(Annotation annotation) { // traverse all sentences in this document for (CoreMap sentence:annotation.get(SentencesAnnotation.class)) { // loop over all tokens in sentence (the text already tokenized) List&lt;CoreLabel&gt; toks = sentence.get(TokensAnnotation.class); for (int start = 0; start &lt; toks.size(); start++) { // assumes that the gazetteer returns the token index // after the match or -1 otherwise int end = Gazetteer.isLocation(toks, start); if (end &gt; start) { for (int i = start; i &lt; end; i ++) { toks.get(i).set(NamedEntityTagAnnotation.class,"LOCATION"); } } } } } } <ref type="figure">Figure 5</ref>: An example of a simple custom anno- tator. The annotator marks the words of possibly multi-word locations that are in a gazetteer.</p><p>props.setProperty("tokenize.whitespace", "true"); props.setProperty("ssplit.eolonly", "true");</p><p>or via command-line flags:</p><p>-tokenize.whitespace -ssplit.eolonly</p><p>We do not attempt to describe all the properties understood by each annotator here; they are avail- able in the documentation for Stanford CoreNLP. However, we note that they follow the pattern of being x.y, where x is the name of the annotator that they apply to.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Adding annotators</head><p>While most users work with the provided annota- tors, it is quite easy to add additional custom an- notators to the system. We illustrate here both how to write an Annotator in code and how to load it into the Stanford CoreNLP system. An Annotator is a class that implements three methods: a sin- gle method for analysis, and two that describe the dependencies between analysis steps: public void annotate(Annotation annotation); public Set&lt;Requirement&gt; requirementsSatisfied(); public Set&lt;Requirement&gt; requires();</p><p>The information in an Annotation is updated in place (usually in a non-destructive manner, by adding new keys and values to the Annotation). The code for a simple Annotator that marks loca- tions contained in a gazetteer is shown in <ref type="figure">figure 5</ref>. <ref type="bibr">2</ref> Similar code can be used to write a wrapper Anno- tator, which calls some pre-existing analysis com- ponent, and adds its results to the Annotation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>While building an analysis pipeline, Stanford</head><p>CoreNLP can add additional annotators to the pipeline which are loaded using reflection. To pro- vide a new Annotator, the user extends the class edu.stanford.nlp.pipeline.Annotator and provides a constructor with the signature <ref type="figure">(String, Properties)</ref>. Then, the user adds the property customAnnotatorClass.FOO: BAR to the properties used to create the pipeline. If FOO is then added to the list of annotators, the class BAR will be loaded to instantiate it. The Properties object is also passed to the constructor, so that annotator-specific behavior can be initial- ized from the Properties object. For instance, for the example above, the properties file lines might be:</p><p>customAnnotatorClass.locgaz: org.foo.GazetteerLocationAnnotator annotators: tokenize,ssplit,locgaz locgaz.maxLength: 5</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper, we have presented the design and usage of the Stanford CoreNLP system, an annotation-based NLP processing pipeline. We have in particular tried to emphasize the proper- ties that we feel have made it successful. Rather than trying to provide the largest and most engi- neered kitchen sink, the goal has been to make it as easy as possible for users to get started using the framework, and to keep the framework small, so it is easily comprehensible, and can easily be used as a component within the much larger sys- tem that a user may be developing. The broad us- age of this system, and of other systems such as NLTK ( <ref type="bibr" target="#b1">Bird et al., 2009)</ref>, which emphasize acces- sibility to beginning users, suggests the merits of this approach. Stanford CoreNLP keeps the models for ma- chine learning components and miscellaneous other data files in a separate models jar file. If you are using Maven, you need to make sure that you list the dependency on this models file as well as the code jar file. You can do that with code like the following in your pom.xml. Note the extra depen- dency with a classifier element at the bottom. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Pointers</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Getting the sentiment of sentences</head><p>We show a command-line for sentiment analysis. MorphaAnnotator: 0.0 sec. ParserAnnotator: 0.4 sec. SentimentAnnotator: 0.1 sec. TOTAL: 0.6 sec. for 16 tokens at 27.4 tokens/sec. Pipeline setup: 3.0 sec. Total time for StanfordCoreNLP pipeline: 4.2 sec. $ grep sentiment sentiment.txt.xml &lt;sentence id="1" sentimentValue="3" sentiment="Positive"&gt; &lt;sentence id="2" sentimentValue="4" sentiment="Verypositive"&gt; &lt;sentence id="3" sentimentValue="1" sentiment="Negative"&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Use within UIMA</head><p>The main part of using Stanford CoreNLP within the UIMA framework <ref type="bibr" target="#b7">(Ferrucci and Lally, 2004</ref>) is mapping between CoreNLP annotations, which are regular Java classes, and UIMA annotations, which are declared via XML type descriptors (from which UIMA-specific Java classes are gen- erated). A wrapper for CoreNLP will typically de- fine a subclass of JCasAnnotator ImplBase whose process method: (i) extracts UIMA annotations from the CAS, (ii) converts UIMA annotations to CoreNLP annotations, (iii) runs CoreNLP on the input annotations, (iv) converts the CoreNLP out- put annotations into UIMA annotations, and (v) saves the UIMA annotations to the CAS. To illustrate part of this process, the ClearTK ( <ref type="bibr" target="#b0">Bethard et al., 2014</ref>) wrapper converts CoreNLP token annotations to UIMA annotations and saves them to the CAS with the following code:  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Overall system architecture: Raw text is put into an Annotation object and then a sequence of Annotators add information in an analysis pipeline. The resulting Annotation, containing all the analysis information added by the Annotators, can be output in XML or plain text forms.</figDesc><graphic url="image-20.png" coords="1,413.39,220.65,50.64,126.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: A simple, complete example program.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>$</head><label></label><figDesc>cat sentiment.txt I liked it. It was a fantastic experience. The plot move rather slowly. $ java -cp "*" -Xmx2g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,parse,sentiment -file sentiment.txt Adding annotator tokenize Adding annotator ssplit Adding annotator pos Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/ english-left3words/english-left3words-distsim.tagger ... done [1.0 sec]. Adding annotator lemma Adding annotator parse Loading parser from serialized file edu/stanford/nlp/models/lexparser/ englishPCFG.ser.gz ... done [1.4 sec]. Adding annotator sentiment Ready to process: 1 files, skipped 0, total 1 Processing file /Users/manning/Software/stanford-corenlp-full-2014-01-04/ sentiment.txt ... writing to /Users/manning/Software/ stanford-corenlp-full-2014-01-04/sentiment.txt.xml { Annotating file /Users/manning/Software/stanford-corenlp-full-2014-01-04/ sentiment.txt [0.583 seconds] } [1.219 seconds] Processed 1 documents Skipped 0 documents, error annotating 0 documents Annotation pipeline timing information: PTBTokenizerAnnotator: 0.0 sec. WordsToSentencesAnnotator: 0.0 sec. POSTaggerAnnotator: 0.0 sec.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>int begin = tokenAnn.get(CharacterOffsetBeginAnnotation.class); int end = tokenAnn.get(CharacterOffsetEndAnnotation.class); String pos = tokenAnn.get(PartOfSpeechAnnotation.class); String lemma = tokenAnn.get(LemmaAnnotation.class); Token token = new Token(jCas, begin, end); token.setPos(pos); token.setLemma(lemma); token.addToIndexes();</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>where Token is a UIMA type, declared as:</head><label>where</label><figDesc></figDesc><table>&lt;typeSystemDescription&gt; 
&lt;name&gt;Token&lt;/name&gt; 
&lt;types&gt; 
&lt;typeDescription&gt; 
&lt;name&gt;org.cleartk.token.type.Token&lt;/name&gt; 
&lt;supertypeName&gt;uima.tcas.Annotation&lt;/supertypeName&gt; 
&lt;features&gt; 
&lt;featureDescription&gt; 
&lt;name&gt;pos&lt;/name&gt; 
&lt;rangeTypeName&gt;uima.cas.String&lt;/rangeTypeName&gt; 
&lt;/featureDescription&gt; 
&lt;featureDescription&gt; 
&lt;name&gt;lemma&lt;/name&gt; 
&lt;rangeTypeName&gt;uima.cas.String&lt;/rangeTypeName&gt; 
&lt;/featureDescription&gt; 
&lt;/features&gt; 
&lt;/typeDescription&gt; 
&lt;/types&gt; 
&lt;/typeSystemDescription&gt; </table></figure>

			<note place="foot">Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 55-60, Baltimore, Maryland USA, June 23-24, 2014. c 2014 Association for Computational Linguistics</note>

			<note place="foot">a simple, approachable design, straightforward interfaces, the inclusion of robust and good quality analysis components, and not requiring use of a large amount of associated baggage.</note>

			<note place="foot" n="1"> Nevertheless, it can call an analysis component written in other languages via an appropriate wrapper Annotator, and in turn, it has been wrapped by many people to provide Stanford CoreNLP bindings for other languages.</note>

			<note place="foot" n="2"> The functionality of this annotator is already provided by the regexner annotator, but it serves as a simple example.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">ClearTK 2.0: Design patterns for machine learning in UIMA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Bethard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><surname>Ogren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename><surname>Becker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LREC</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Natural Language Processing with Python</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Bird</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ewan</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Loper</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<pubPlace>O&apos;Reilly Media</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Effective Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Bloch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Addison Wesley</publisher>
			<pubPlace>Upper Saddle River, NJ</pubPlace>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">SUTIME: A library for recognizing and normalizing time expressions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Angel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LREC 2012</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An NLP Curator (or: How I learned to stop worrying and love NLP pipelines)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Srikumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Sammons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LREC 2012</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">GATE: an architecture for development of robust HLT applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hamish</forename><surname>Cunningham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diana</forename><surname>Maynard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kalina</forename><surname>Bontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valentin</forename><surname>Tablan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Generating typed dependency parses from phrase structure parses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marie-Catherine</forename><surname>De Marneffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bill</forename><surname>Maccartney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LREC 2006</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="449" to="454" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">UIMA: an architectural approach to unstructured information processing in the corporate research environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ferrucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Lally</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Natural Language Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="327" to="348" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Incorporating non-local information into information extraction systems by Gibbs sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jenny</forename><forename type="middle">Rose</forename><surname>Finkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Trond</forename><surname>Grenager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL 43</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="363" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Darmstadt knowledge processing repository based on UIMA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gurevych</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>MÃ¼hlhÃ¤user</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>MÃ¼ller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Steimle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zesch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">First Workshop on Unstructured Information Management Architecture at GLDV</title>
		<meeting><address><addrLine>TÃ¼bingen</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An overview of JCoRe, the Julie lab UIMA component registry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Buyko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Landefeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>MÃ¼hlhausen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Poprat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tomanek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wermter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LREC</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fast exact inference with a factored model for natural language parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Christopher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<editor>Suzanna Becker, Sebastian Thrun, and Klaus Obermayer</editor>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="3" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Deterministic coreference resolution based on entity-centric, precision-ranked rules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heeyoung</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Angel</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yves</forename><surname>Peirsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathanael</forename><surname>Chambers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihai</forename><surname>Surdeanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Jurafsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">39</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Why this project is successful?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anthony</forename><surname>Patricio</surname></persName>
		</author>
		<ptr target="https://community.jboss.org/wiki/" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Recursive deep models for semantic compositionality over a sentiment treebank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Perelygin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Chuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Potts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP 2013</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1631" to="1642" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Feature-rich part-ofspeech tagging with a cyclic dependency network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kristina</forename><surname>Toutanova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoram</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NAACL 3</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="252" to="259" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
