<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T12:26+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">nQuery - A Natural Language Statement to SQL Query Generator</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>July 30-August 4, 2017. July 30-August 4, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nandan</forename><surname>Sukthankar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanket</forename><surname>Maharnawar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pranay</forename><surname>Deshmukh</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yashodhara</forename><surname>Haribhakta</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vibhavari</forename><surname>Kamble</surname></persName>
						</author>
						<title level="a" type="main">nQuery - A Natural Language Statement to SQL Query Generator</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of ACL 2017, Student Research Workshop</title>
						<meeting>ACL 2017, Student Research Workshop <address><addrLine>Vancouver, Canada; Vancouver, Canada</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="17" to="23"/>
							<date type="published">July 30-August 4, 2017. July 30-August 4, 2017</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.18653/v1/p17-3004</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In this research, an intelligent system is designed between the user and the database system which accepts natural language input and then converts it into an SQL query. The research focuses on incorporating complex queries along with simple queries irrespective of the database. The system accommodates aggregate functions, multiple conditions in WHERE clause, advanced clauses like ORDER BY, GROUP BY and HAVING. The system handles single sentence natural language inputs, which are with respect to selected database. The research currently concentrates on MySQL database system. The natural language statement goes through various stages of Natural Language Processing like morphological, lexical, syntactic and semantic analysis resulting in SQL query formation .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Today, virtually every relational database man- agement system (RDBMS) uses Structured Query Language (SQL) for querying and maintaining the database. Users accessing relational databases need to learn SQL and build queries in the right syntax for retrieving the data. It becomes a big hurdle for all those who are not technically knowl- edgeable in this domain to write the queries in SQL. It would be very convenient if the relational database system can be queried using natural lan- guage like English.</p><p>Natural language processing (NLP) is the abil- ity of a computer program to understand human speech as it is spoken. While natural language may be easy for people to learn and use, it has been proved to be hard for a computer to master. De- spite such challenges, natural language processing is regarded as a promising and important endeavor in the field of computer research.</p><p>nQuery will translate natural language queries into SQL before retrieving data from database. It will deal with single sentence inputs given by the user using a particular database. The sys- tem mainly focuses on data retrieval but also pro- vides the facility to convert DML natural language statements to SQL. However, the system will out- put queries which can be used for querying the MySQL database system only. The aim of the sys- tem is to reduce the complexity of database query- ing. The approach our system uses, extracts cer- tain keywords from the natural language statement and goes through various steps of Natural Lan- guage Processing. This system focuses on table mapping, attribute mapping and clause tagging to generate the resultant query.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Over the years, certain systems which focus only on a particular database have been built to serve a particular purpose. (Woods, 1973) developed a system called LUNAR, that answered questions about rock samples brought back from the moon. LIFER/LADDER designed by <ref type="bibr" target="#b3">(Hendrix, 1978)</ref> was designed as a natural language interface to a database of information about US Navy ships. The system could only support simple one-table queries on a specific database.</p><p>Some of the recent developments try to build a complete system which can generate various types of queries. An expert system was pro- posed by <ref type="bibr" target="#b8">(Siasar et al., May 2008</ref>) using the con- cepts of syntactic and semantic knowledge. They have also suggested a selection algorithm to select most appropriate query from the suggested possi-  <ref type="bibr" target="#b6">Rao et al., 2010</ref>) have put forth a sys- tem in which simple queries along with basic im- plicit queries are covered. (Chaudhari, November 2013) implemented a system which handled sim- ple queries and aggregate functions using a proto- type approach. Both the above methods have not handled multiple tables and advanced clauses. . ( <ref type="bibr" target="#b2">Ghosh et al., 2014</ref>) built on the development done by (Chaudhari, November 2013) and developed an automatic query generator which took natural language input in the form of text or speech. It provided support for simple nested queries and ag- gregate functions. The system handled sentences which explicitly mention the attribute names as they are in the Database. Our system handles the problem by a specific substring algorithm we have developed. We have looked to do the tasks which the above systems do in a more efficient way by building a different type of algorithm relying on conditional substring matching to map the words to attributes and tables. We also go beyond by in- cluding various different types of queries.</p><p>A different type of approach was used by <ref type="bibr" target="#b7">(Reinaldha and Widagdo, 2014</ref>) in which the dif- ferent kinds of questions which can be asked when a database is to be queried were analyzed. They have made use of semantic rules to find out de- pendencies among the words present in the ques- tion asked. ( <ref type="bibr" target="#b5">Palakurthi et al., 2015</ref>) provides in- formation about the types of attributes and clas- sification features. They describe how different kinds of attributes are handled differently when they occur in sentences. We handle explicit at- tributes and certain types of implicit attributes in sentences. (Ghosal et al., March 2016) proposed a system which worked well on simple queries in- volving multiple tables. But the data dictionar- ies used for the system are limited and the gram- mar is hard coded. (Kaur and J, Jan 2016) em- phasized on simple queries and basic JOIN op- erations. However, the system does not accom- modate advance clauses like aggregate functions, GROUP BY and HAVING Clauses. Our system incorporates advanced clauses along with all the simple queries and generalizes well on different databases. <ref type="bibr" target="#b9">(Singh and Solanki, 2016)</ref> proposed an algorithm to convert natural language sentence to SQL queries. They used verb lists, noun lists and rules to map attributes and tables to the words in the sentence. The system also handled ambiguity among the inputs. We have tried to use concepts discussed in this algorithm like noun and verb lists in order to develop our algorithm.</p><p>From the above literature survey, we were able to get a fair idea of the work carried out in this field of research. The shortcomings of the referred pa- pers and applications along with the future work mentioned motivated us to take up this research. The increasing importance of Natural Language Processing lured us towards learning these con- cepts. The system we propose looks to go beyond the accomplished work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">System Design</head><p>As we have seen from the literature survey, ev- ery system had limitations. We propose a system which looks to overcome the shortcomings of the existing systems. Our system gets a natural lan- guage sentence as an input, which is then passed through various phases of NLP to form the final SQL query. <ref type="figure" target="#fig_0">Refer Fig 1</ref> for the data flow diagram and <ref type="figure">Fig 2 for</ref> the running example.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Tokenize and Tag</head><p>The input natural language query gets split into different tokens with the help of the tokenizer from 'NLTK' package. The tokenized array of words is tagged according to the part-of-speech tagger. All processes following this step use these tagged to- kens for processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Analyze tagged tokens</head><p>Based on the tagged tokens of earlier step, the noun map and verb list is prepared through one it- eration over the tokens. The tokens corresponding to aggregate functions are also mapped with their respective nouns. The decision whether the natu- ral language statement represents a data retrieval query (SELECT) or a DML query (INSERT, UP- DATE, DELETE) is taken at this stage with the help of certain 'data arrays' for denoting type of query. For example, when words like 'insert' and its certain synonyms appear in the input, the type of query is 'INSERT' and so on. In any type of query, the tentative tags 'S' (SELECT), 'W' (WHERE), 'O' (ORDER BY) are mapped to the nouns indicating the clauses to which they belong. For this, we have designed 'data dictionaries' for different clauses. These data dictionaries consist of the token-clause term pair, for e.g. aggregate clause data dictionary is "number": "COUNT", "count": "COUNT", "total": "SUM", "sum": "SUM", "average": "AVG", "mean": "AVG". Thus, if any of these tokens is encountered, it is likely to have aggregate clause and accordingly the nouns are tagged with the clause tag.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Map to table names and attributes</head><p>Using the noun map and verb list, the table set is prepared, which will hold the tables that are needed in the query to be formed. This is based on the fact that the table names are either nouns or verbs. The noun map is used to find the at- tributes which are needed in the final query. The     <ref type="table">Table attribute</ref>   <ref type="table">Algorithm with example attributes, the table associated with the attribute  and the clause tag are stored in an attribute-table  map</ref> which is used in the final stage of query for- mation. This is done using the string matching al- gorithm that we have implemented in our system. The words in the input sentence need not exactly be as they are in the database. The stemmer and lemmatiser are applied on the words before they are matched using our string matching algorithm. The data obtained during this step i.e. table set and attribute-table map, is most likely to be in the final query, however, it might be refined later.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Filter redundancy and finalize clauses of the query</head><p>Using the various data dictionaries defined, the system has already decided which clauses are likely to exist in the final query and has mapped the data to the clauses. But, some of the data has to be finalized at this stage.  <ref type="bibr">[table1, table2]</ref> and table1 has at- tributes [a1, a2] and table2 has [a1, a2, a3] after the previous steps, then table2 is enough to repre- sent all the attributes required and hence table1 is removed. There are various other algorithms ap- plied in order to filter the results and finalize the table set and table-attribute map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Form the final query and execute</head><p>Currently, as our system handles only MySQL queries, the templates used for the query forma- tion will be according to the MySQL syntax. Ac- cording to the type of query selected in the second stage of the process (Analyze tagged tokens), the appropriate template is chosen. The template is selected from the following:</p><p>1. For data retrieval queries (SELECT):</p><p>• SELECT &lt;select clause&gt; FROM &lt;tables&gt; WHERE &lt;where clause&gt; ORDER BY &lt;order by clause &gt; GROUP BY &lt;group by clause&gt; HAVING &lt;having clause&gt; LIMIT &lt;limit clause&gt;.</p><p>2. For data manipulation queries (INSERT, UP- DATE, DELETE):</p><p>• </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results and Analysis</head><p>The corpus that can be used to test our system is not readily available and is dependent on a database. Hence, we have tested our system on a synthesized corpus of natural language statements related to a bank and a university database. The university and bank database consists of 11 and 6 tables respectively. However, system can work on any complex database. The natural language statement has to be a single sentence. The system has been evaluated on a corpus of around 75 natu- ral language statements of university database and around 50 related to bank database. The accuracy of the system is found out to be around 86%. The system gives the same SQL query as the output when the same natural language statement is rep- resented in different ways. If the system fails to generate SQL query corresponding to any natural language statement, an error message is displayed. These are a few results given by the system on the university corpus:</p><p>1. Find the student name where instructor name is 'Crick'.</p><p>• SELECT DISTINCT student.stud name FROM instructor INNER JOIN advisor ON instructor.ID = advisor.inst ID INNER JOIN student ON student.ID = advisor.stud ID WHERE instructor.name = 'Crick'</p><p>In this database, the tables 'student' and 'in- structor' are linked through the table 'advi- sor'. So, we can see that this query deals with multiple tables which are joined by INNER JOIN.</p><p>2. Find all student name whose credits are be- tween 90 and 100 and department name is 'Finance' or 'Biology'.</p><p>• SELECT DISTINCT student.stud name FROM student WHERE ( student.tot cred BETWEEN '90' AND '100' ) AND ( student.dep name = 'Finance' OR student.dep name = 'Biology' )</p><p>The above query showcases multiple condi- tions within the WHERE clause. This query also involves use of BETWEEN clause and logical clauses like AND, OR.</p><p>3. List all student names whose credits are 50 in decreasing order of credits.</p><p>• SELECT DISTINCT student.stud name FROM student WHERE student.tot cred = '50' ORDER BY student.tot cred DESC Another type of query is the one involving sorting its result based on some attribute. For this purpose, the query uses the ORDER BY clause to sort the results in decreasing order.</p><p>4. Give the department name where maximum salary of instructor is greater than 50000.</p><p>• SELECT DISTINCT instructor.dep name FROM instructor GROUP BY instructor.dep name HAVING MAX(instructor.salary) &gt;'50000'</p><p>In SQL, when an aggregate function is com- pared to constant, like in this case maxi- mum of salary is compared to 50000, then the query involves use of HAVING clause in- stead of a WHERE clause. Also, whenever HAVING is used, the results are supposed to be grouped by the attributes in the SELECT clause.</p><p>5. Give the department name where salary of in- structor is greater than average of salary.</p><p>• SELECT DISTINCT instructor.dep name FROM instructor WHERE instructor.salary &gt; ( SELECT AVG(instructor.salary) FROM instructor )</p><p>This query showcases a special case of nested queries. Whenever an attribute is compared to the result of an aggregate function, i.e. in this case salary greater than average of salary, we have to use nested query.</p><p>6. Find the course taught by Crick.</p><p>• SELECT DISTINCT teaches.course id FROM teaches NATURAL JOIN in- structor WHERE instructor.name = 'Crick'</p><p>Till now, we have seen cases in which an at- tribute associated to the value is mentioned in the natural language statement. In this case, we handle cases where attribute is not men- tioned. We find out the most appropriate at- tribute for the given value. • SELECT DISTINCT instructor.name FROM instructor ORDER BY instructor.name ASC As seen in this example, there can be multi- ple ways of representing the same natural lan- guage statement.The system gives the same SQL query as the output when the same nat- ural language statement is represented in dif- ferent ways.</p><p>8. Insert a student whose id is 5, name is Josh, department name is Physics and credits are 150.</p><p>• INSERT INTO student ( student.ID, student.stud name, student.dep name, student.tot cred ) VALUES ( '5' , 'Josh' , ' <ref type="bibr">Physics' , '150' )</ref> In addition to the data retrieval queries, our system also provides a natural language in- terface to insert data into the database. Other DML queries such as UPDATE and DELETE are also provided by the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Limitations</head><p>The following are some of the types of inputs that are not presently handled by our system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Find the capacity of the classroom number 3128 in building Taylor</head><p>• SELECT * FROM classroom WHERE classroom.capacity = '3128' AND classroom.building = 'Taylor'</p><p>In this particular example, the system fails to decide whether to take 'capacity of class- room' or 'classroom number' as an n-gram. Hence, the mapping fails.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Who teaches Physics?</head><p>• SELECT * FROM department WHERE department.dep name = 'Physics'</p><p>In this example, the implicit query module of our system is able to map Physics to 'de- partment name' attribute from table 'depart- ment'. But it fails to identify that 'who' refers to a person (an instructor).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Comparison and Conclusion</head><p>Similar existing systems:</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: nQuery-Data Flow Diagram</figDesc><graphic url="image-1.png" coords="2,72.00,62.80,425.20,226.78" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Find</head><label></label><figDesc>the names of all the instructors from 'Comp Sci' department Tokenize &amp; Tag ['Find', 'NNP'], ['names', 'NNS'], ['instructors', 'NNS'], ['Comp', 'NNP'], ['Sci', 'NNP'], ['department', 'NN'] Analyze tagged tokens Noun map: 'name instructor': ['S'], 'depart': ['W'] Map to</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Figure 2: Algorithm with example</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>INSERT INTO &lt;insert clause&gt; VALUES &lt;values clause&gt; • UPDATE &lt;update clause&gt; SET &lt;set clause&gt; WHERE &lt;where clause&gt; • DELETE FROM &lt;delete clause&gt; WHERE &lt;where clause&gt; Based on the data about various clauses col- lected from earlier steps and the information about attributes and tables stored in the attribute-table map, the final query is formed by filling in the in- formation into the appropriate template. Depend- ing on the clause data collected from earlier steps, corresponding &lt;&gt; are filled. Depending on the relation between multiple ta- bles, the decision of INNER JOIN or NATURAL JOIN is taken. For example, if there are two ta- bles. If these two tables have one common at- tribute and is named the same in both, then there is NATURAL JOIN between the tables. But if the common attribute is named differently in the two tables, then there is INNER JOIN between the ta- bles. The final query is as shown in Fig 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>7</head><label></label><figDesc>. (a) Publish in alphabetic order the names of all instructors. (b) Give names of all the instructors in al- phabetic order. (c) Give instructors names in ascending or- der.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table set :</head><label>set</label><figDesc></figDesc><table>['instructor', 'department'] 
Table attribute map: 'department': 
[['dep name', 'W']], 'instructor': 
[['name', 'S'], ['dep name', 'W']] 

Filter redundancy 
&amp; finalize clauses 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table set : ['instructor']</head><label>set</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head></head><label></label><figDesc>The data related to GROUP BY and HAVING clause is collected using the previous data and the basic rules of SQL. For example, if aggregate function is com- pared to a constant, i.e. 'MAX(salary) &gt; 40000', then 'HAVING' clause has to be used instead of 'WHERE' clause. As mentioned in the earlier step, the refinement of data must be done. Here, the redundant tables and attributes are removed using some filter algo- rithms. For example, one of the algorithm filters the table and their corresponding attributes which are a subset of some other table in table set. i.e. if table set has</figDesc><table></table></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">No system has incorporated HAVING, GROUP BY and other clauses.</head><p>4. Many systems were specific use systems which were limited to a certain database. 5. No system till date incorporates such a wide range of queries.</p><p>Our System:</p><p>• and DELETE.</p><p>• The system works irrespective of the selected MySQL database.</p><p>• No system till date incorporates such a wide range of queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Future Work</head><p>The following points are not yet incorporated in the system and are hence left as future work. The development on the points mentioned in future work is in progress.</p><p>1. It is possible that a natural language state- ment can result in multiple SQL queries. Machine learning can be incorporated to choose the most efficient query.</p><p>2. This system only considers MySQL database system. It can be expanded to work for any other database system or unstructured databases.</p><p>3. More efficient algorithm to handle implicit queries can be developed.</p><p>4. Only single sentence natural language input is handled. Multiple sentences which result in a single query can be incorporated.</p><p>5. Neural methods can be used to solve the problem of indecisiveness of n-grams.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Natural language statement to sql query translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pranali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chaudhari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Applications</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="975" to="8887" />
			<date type="published" when="2013-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Sql query formation using natural language processing (nlp)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">Debarati</forename><surname>Prof</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tejas</forename><surname>Ghosal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Waghmare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chinmay</forename><surname>Satam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hajirnis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Advanced Research in Computer and Communication Engineering</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2016-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Automatic sql query formation from natural language query</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prasun</forename><surname>Kanti Ghosh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saparja</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Subhabrata</forename><surname>Sengupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Microelectronics, Circuits and Systems</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="975" to="8887" />
		</imprint>
	</monogr>
	<note>MICRO-2014</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Lifer / ladder</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hendrix</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Conversion of natural language query to sql. International Journal of Engineering Sciences and Emerging Technologies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prabhdeep</forename><surname>Kaur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shruthi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Classification of attributes in a natural language query into different sql clauses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashish</forename><surname>Palakurthi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Ruthu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Arjun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radhika</forename><surname>Akula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mamidi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Research</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Natural language query processing using semantic grammar</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gauri</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chanchal</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Snehal</forename><surname>Chaudhry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nikita</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dr</forename><forename type="middle">S H</forename><surname>Patil</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal on Computer Science and Engineering</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="219" to="223" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Natural language interfaces to database (nlidb): Question handling and unit conversion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filbert</forename><surname>Reinaldha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tricya</forename><forename type="middle">E</forename><surname>Widagdo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Using natural language processing in order to create sql queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Siasar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Norouzifard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Davarpanah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Shenassa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Computer and Communication Engineering</title>
		<meeting>the International Conference on Computer and Communication Engineering</meeting>
		<imprint>
			<date type="published" when="2008-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An algorithm to transform natural language into sql queries for relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garima</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arun</forename><surname>Solanki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Selforganizology</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="100" to="116" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Progress in natural language understanding-an application to lunar geology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">A</forename><surname>Woods</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">National Computer Conference</title>
		<imprint>
			<date type="published" when="1973" />
			<biblScope unit="page" from="451" to="460" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
