<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T11:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Transition-based Dependency DAG Parsing Using Dynamic Oracles</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015-07-28">July 28, 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alper</forename><surname>Tokgöz</surname></persName>
							<email>tokgoza@itu.edu.tr</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Engineering Istanbul</orgName>
								<orgName type="institution">Istanbul Technical University</orgName>
								<address>
									<country key="TR">Turkey</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">¨</forename><surname>Uls¸enuls¸en</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Engineering Istanbul</orgName>
								<orgName type="institution">Istanbul Technical University</orgName>
								<address>
									<country key="TR">Turkey</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eryiˇgit</forename><surname>Eryiˇgit</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Engineering Istanbul</orgName>
								<orgName type="institution">Istanbul Technical University</orgName>
								<address>
									<country key="TR">Turkey</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Transition-based Dependency DAG Parsing Using Dynamic Oracles</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the ACL-IJCNLP 2015 Student Research Workshop</title>
						<meeting>the ACL-IJCNLP 2015 Student Research Workshop <address><addrLine>Beijing, China</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page" from="22" to="27"/>
							<date type="published" when="2015-07-28">July 28, 2015</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In most of the dependency parsing studies , dependency relations within a sentence are often presented as a tree structure. Whilst the tree structure is sufficient to represent the surface relations, deep dependencies which may result to multi-headed relations require more general dependency structures, namely Directed Acyclic Graphs (DAGs). This study proposes a new dependency DAG parsing approach which uses a dynamic oracle within a shift-reduce transition-based parsing framework. Although there is still room for improvement on performance with more feature engineering , we already obtain competitive performances compared to static oracles as a result of our initial experiments conducted on the ITU-METU-Sabancı Turkish Tree-bank (IMST).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Syntactic parsing is the process of determining the grammatical structure of a sentence as con- forming to the grammatical rules of the relevant natural language. The structure of the sentence is determined according to the grammar formal- ism that the parser is built upon. Phrase struc- ture parsers, also known as constituency parsers, parse a sentence by splitting it into its smaller constituents. On the other hand, in dependency parsers, the structure of the sentence is represented as dependency trees consisting of directed depen- dency links between a dependent and a head word.</p><p>Data-driven dependency parsing frameworks have gained increasing popularity in recent years and been used in a wide range of applications such as machine translation <ref type="bibr" target="#b1">(Ding and Palmer, 2005</ref>), textual entailment ( <ref type="bibr" target="#b14">Yuret et al., 2013</ref>) and question answering ( <ref type="bibr" target="#b13">Xu et al., 2014</ref>). Most data-driven de- pendency parsers achieve state-of-the art parsing performances with a language agnostic approach on the different syntactic structures of different languages <ref type="bibr" target="#b0">(Buchholz and Marsi, 2006</ref>). Mod- ern data-driven dependency parsers can be catego- rized into two groups: graph-based and transition- based parsers. Graph-based parsers rely on the global optimization of models aiming to find span- ning trees over dependency graphs. On the other hand, transition-based parsers work basically with greedy local decisions that are deterministically selected by oracles, which are generic machine learning models trained to make decisions about the next transition action. In a recent study, <ref type="bibr" target="#b15">Zhang and Nivre (2012)</ref> propose a new approach on transition-based parsing that aims to provide global learning instead of greedy local decisions.</p><p>Despite the high performances of both graph- based and transition-based dependency parsers, these are generally bounded by the constraint that each dependent may not have multiple heads. Therefore, the resulting parsing output is a tree where words correspond to nodes and dependency relations correspond to edges. Although depen- dency trees yield satisfactory performances, they are inadequate in capturing dependencies at dif- ferent levels of semantic interpretations or more complicated linguistic phenomena (e.g. relative clauses, anaphoric references) which could result in multi-head dependencies together with exist- ing surface dependency relations. An example is given in <ref type="figure" target="#fig_0">Figure 1</ref> which is taken from the Turk- ish IMST <ref type="bibr">Treebank (Sulubacak and Eryi˘ git, 2015)</ref>. In <ref type="figure" target="#fig_0">Figure 1</ref>, the dependent token "Umut" depends on more than one head token with SUBJECT re- lations: 1) the verb "kos¸makkos¸mak" (to run) and 2) the verb "düsdüs¸mek" (to fall). Adding a second rela- tion (emphasized with a dash-dotted line in the fig- ure) to the token "Umut" breaks the condition that each token may have at most one head, and ren- ders existing dependency tree parsers incompati- ble for this setup. It is also worth mentioning that the deep dependencies in the IMST are not dis- criminated from surface dependencies by the use of different labels. In this paper, for the first time in the litera- ture, we investigate the impact of using dynamic oracles for parsing multi-head dependency struc- tures by extending the approach of <ref type="bibr" target="#b3">Goldberg and Nivre (2012)</ref>. We provide comparisons with the replication of the basic shift-reduce DAG pars- ing algorithm of <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref> and a first time implementation of their proposed arc- eager parsing algorithm. The remainder of the pa- per first gives a background information about the topic, then introduces the DAG parsing framework and the proposed algorithms together with experi- ments and results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Although it is possible to discover the syntactic re- lations with a two stage model by first finding the regular surface dependencies and then finding the deep relations with post-processing as in <ref type="bibr" target="#b9">Nivre et al. (2010)</ref>, it is not always straightforward to de- cide which dependencies should be treated as sur- face relations or deep relations as in the case of Turkish. Thus, in this study, we focus on single stage models and aim to discover the entire set of relations in a single pass. <ref type="bibr" target="#b6">McDonald and Pereira (2006)</ref> use graph-based algorithms for DAG pars- ing simply using approximate interference in an edge-factored dependency model starting from de- pendency trees. On the other hand, <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref> propose a transition-based counter- part for DAG parsing which made available for parsing multi-headed relations. They modified the existing shift-reduce bottom-up dependency pars- ing algorithm of <ref type="bibr" target="#b7">Nivre and Nilsson (2005)</ref> to al- low multiple heads per token by the use of cycle removal and pseudo-projectivization as a prepro- cessing stage. They report higher performance scores on the Danish treebank compared to <ref type="bibr" target="#b6">McDonald and Pereira (2006)</ref>.</p><p>A standard way of determining transition ac- tions in a shift-reduce dependency parser is us- ing static oracles. During the training stage, the learning instances for the oracle are prepared by the use of manually annotated gold-standard parse trees and the current parsing configuration. Dur- ing the parsing stage, the already trained oracle decides on the next transition operation. One of the problems with static oracles lays beneath the spurious ambiguity, which implies there might be more than one transition sequence for a given sen- tence and the sequence proposed by an oracle may not be the easiest to learn. The second problem oc- curs when the parser makes a parsing error which leads to a parser configuration from which the cor- rect parse tree is not derivable. The algorithm does not provide any solutions for dealing with the er- ror propagation caused by such situations. The idea of dynamic oracles introduced by Goldberg and Nivre (2012) rises for handling the aforemen- tioned handicaps of static oracles. Rather than re- turning a unique transition for a given configura- tion, a dynamic oracle returns a set of valid tran- sitions regarding the current configuration, which would allow the algorithm to explore non-optimal configurations during the training procedure.</p><p>2. a stack σ which consists of the tokens being processed,</p><p>3. a set A of assigned dependency arcs.</p><p>The transition actions explained in the follow- ing subsections are basic stack and queue opera- tions that correspond to parsing actions marking dependency relations. The algorithm starts with a buffer β initialized with all tokens of a sentence preserving their sequence, and an empty stack σ. The parsing process finishes when there are no nodes left in β and only the artificial root in σ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic shift-reduce parsing with multiple heads</head><p>The first algorithm that is capable of parsing DAG structures is the standard algorithm of <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref>. The complete list of the transitions of this algorithm is as follows:</p><p>• Shift: Pops the first item of the buffer and pushes it onto the top of the stack.</p><p>• Left-Reduce: Pops the top two items of the stack, creates a left arc between them where the top item is assigned as the head of the item below, and pushes the head token back onto the stack.</p><p>• Right-Reduce: Pops the top two items of the stack, creates a right arc between them, where the item below is assigned as the head of the top item, and pushes the head token back onto the stack.</p><p>• Left-Attach: Creates a left arc between the top two items of the stack, where the top item is assigned as the head of the one below. The stack and the buffer remain unchanged.</p><p>• Right-Attach: Creates a right dependency arc between the two top items on the stack and assigns the top token as the dependent of the token below. As the second step, it pops the top of the stack and places it into the buffer β.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Multi-Head Arc-Eager Parsing Algorithm</head><p>The second transition algorithm introduced but not implemented by <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref> is a vari- ation of the Arc-Eager algorithm of <ref type="bibr" target="#b8">Nivre et al. (2007)</ref> and has the following transition operations:</p><p>• Shift: Pops the first item of the buffer and pushes it onto the top token of the stack.</p><p>• Left-Arc: Creates a left dependency arc be- tween the top token of the stack and the first token of the input buffer, where the first token in the buffer becomes the head and the one at the top of the stack becomes the dependent. It is also worth noticing that the stack and the input buffer remains unchanged.</p><p>• Right-Arc: Creates a right dependency arc between the top token of the stack and the first token on the input buffer, where the to- ken in the stack becomes the head, and the token which is in front of the buffer becomes the dependent. It is also worth noticing that the stack and the input buffer remains un- changed.</p><p>• Reduce: Pops the top item of the stack if and only if it was previously associated with at least one head.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Multi-Head Arc Eager Parsing with a Dynamic Oracle</head><p>In order to design a dynamic oracle with the ca- pability of parsing multi-head dependencies, we need an efficient method for computing the cost of each transition. To this end, we extend the dynamic oracle defined by <ref type="bibr" target="#b3">Goldberg and Nivre (2012)</ref>, considering DAG parsing arc-eager sys- tem of <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref>. Extended arc- eager transition system will operate in the same way as previously defined in Section 3.2, within a dynamic oracle system whose cost function is de- fined with a transition operation, the current con- figuration c = (σ|s, b|β, A) 1 and the gold parse of the sentence (G gold ). Differing from Goldberg and Nivre (2012), for ease of computation, we pre- fer marking transitions as zero cost or costly in- stead of computing the exact cost:</p><p>• Cost(Lef tAttach, c, G gold ) Attaching s to b with a left arc is costly, if there is a right arc between s and b, or it is already attached with a left arc.</p><p>• Cost(RightAttach, c, G gold ) Attaching s to b by creating right arc is costly, if there is a left arc between s and b, or it is already at- tached with a right arc.</p><p>• Cost(Reduce, c, G gold ) Popping s from the stack means it will be no longer possible to associate it with any head or dependent from buffer β, therefore it is costly if it has heads or dependents in the β.</p><p>• Cost(Shif t, c, G gold ) Pushing b onto the stack means it will be no longer possible to associate it with any heads or dependents in stack σ, therefore it is costly if it has a head or dependent token in the σ.</p><p>Since left attach and right attach operations do not change the parser configuration (i.e. these op- erations cannot lead to a parser configuration from which the gold tree is not reachable), their cost is measured according to the validity of the attach- ment. The only difference of our multi-head vari- ant from the single head arc-eager transition sys- tem is that the left and right arc operations do not change the parser state. As such, it is essentially a relaxed version of the single-head system. There- fore, since the arc-decomposition property holds for the single-head system (as proven by <ref type="bibr" target="#b4">Goldberg and Nivre (2013)</ref>), it also holds for our variant.</p><p>We use the same online training procedure (with the perceptron algorithm) as <ref type="bibr" target="#b3">Goldberg and Nivre (2012)</ref> given in Algorithm 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 Online training with dynamic oracle</head><p>1: procedure TRAIN</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2:</head><p>w ← 0 3:</p><formula xml:id="formula_0">for I ← 1, ITERATIONS do 4: c ← c s (x) 5:</formula><p>for sentence x do</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>while c is not terminal do</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>t p ← argmax t w.Φ(c, t)</p><p>8:</p><formula xml:id="formula_1">ZC ← {t|o(t; c; G gold ) = true} 9: t o ← argmax ttZC w.Φ(c, t) 10: if t p ∈ ZC then 11: w ← w + Φ(c, t o ) − Φ(c, t p ) 12:</formula><p>t n ←NEXT(I, t p , ZC) </p><formula xml:id="formula_2">else 18: RAN DOM ELEM EN T (ZC)</formula><p>The proposed oracle will return a set of zero cost transition operations (denoted as ZC at line 8) where the costs are calculated according to the cost function defined above. Feature weights will be updated only if the perceptron model makes a transition prediction that does not belong to the zero cost transitions (lines 10 and 11). After that, the next transition operation is chosen by the func- tion NEXT, which returns the transition that is pre- dicted by the model if it belongs to zero cost tran- sitions; if not, it returns a random transition which belongs to the zero cost transition set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head><p>In order to apply the specified DAG parsing al- gorithm to non-projective sentences, a pseudo- projective transformation operation is applied to the IMST. For that aim, we apply Head scheme 2 described by <ref type="bibr" target="#b7">Nivre (2005)</ref>. Moreover, before the application of this pseudo-projective transforma- tion, the cyclic dependency paths are handled as described by <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref>, by reversing the shortest arc within the cyclic dependency path until no cyclic path remains. 99.3% precision and 99.2% recall are acquired on IMST by applying the pseudo-projective transformation and detrans- formation operations. As a learning component, we follow the work of <ref type="bibr" target="#b11">Sagae and Tsujii (2008)</ref> and use a Maximum Entropy model for the clas- sification with the greedy search algorithm. For the dynamic oracle experiment, we use an aver- aged perceptron algorithm iterating 15 times over the training data.</p><p>The following features are used in all of the ex- periments:</p><p>• The POS tag, lemma and morphological fea- tures of the top 3 tokens on the stack and the first 3 tokens in the buffer.</p><p>• The POS tag and dependency relations of the rightmost and leftmost modifiers of the top 2 items on the stack.</p><p>• The number of heads and dependents of the top item of the stack and the first item of the buffer.</p><p>• The dependency relations of the top of the stack.</p><p>• Whether the top 2 tokens on the stack have a dependency relation between them or not.</p><p>• Whether the top token of the stack and the first of the buffer have a dependency relation between them or not, and if so the direction and the type of the relation.</p><p>• Combination of the surface form of the top token of the stack and its number of left and right modifiers.</p><p>• Combination of the surface form of the first token of the buffer and its number of left and right modifiers.</p><p>• The surface forms and POS tags of heads of the top token of the stack and the first token of the buffer.</p><p>• The previous two parsing actions.</p><p>For training and evaluation purposes, we use the IMST with ten-fold cross validation. Experiment results are given in <ref type="table">Table 4</ref>.  <ref type="table">Table 4</ref>, the static arc-eager DAG implementation for Turkish performs slightly worse than the arc-standard algorithm. This is not surprising in the light of previous studies <ref type="bibr" target="#b10">(Nivre, 2008;</ref><ref type="bibr" target="#b2">Eryi˘ git et al., 2008)</ref> reporting that the arc standard algorithm performs better in tree parsing due to the smaller number of classes to be learned by the oracle. However, the proposed multi-head arc-eager algorithm with dynamic oracle (referred to as Dynamic-Eager) yields the best precision, re- call and F1 scores among the three experiments. <ref type="bibr">3</ref> In this study, although there is still room for improvement on performance with more feature engineering, we obtain better results on Turkish IMST treebank between static and dynamic ora- cles with our newly proposed method for parsing DAGs. This encourages us to test our system with different languages as future work with the expec- tation that the ameliorations will be much higher than the reported ones in the single-head scenario.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion and Future Works</head><p>In this paper, we experimented with three differ- ent transition-based algorithms for DAG parsing which eliminate the single-head constraint of tra- ditional algorithms and allows multi-head depen- dency relations to represent more complicated lin- guistic phenomena along with surface relations. We present the first results for arc-eager DAG parsing with static oracles and propose a new arc- eager DAG parsing algorithm using dynamic ora- cles. Our initial experiments conducted on Turkish pave the way for future research on the usage of the dynamic arc-eager DAG parsing for other lan- guages. For future work, we will first conduct ex- periments on how well the Dynamic-Eager algo- rithm performs on different treebanks, including multi-head dependencies (such as the Danish tree- bank ( <ref type="bibr" target="#b5">Kromann, 2003)</ref>). Secondly, we will con- duct experiments on previously described static- oracle parsing algorithms by using different clas- sifiers such as Support Vector Machines.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Example for Turkish multi-head dependencies.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>c</head><label></label><figDesc>← t n (c) 14: procedure NEXT(I, t, ZC) 15: if t ∈ ZC then 16: return t 17:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Unlabeled scores of experiments with 
using IMST. 

Experiment 
Precision Recall F1 
Static-Standard 79.42 
77.56 78.50 
Static-Eager 
78.90 
76.79 77.83 
Dynamic-Eager 79.68 
81.17 80.42 

As shown in </table></figure>

			<note place="foot" n="3"> Transition-Based Solutions for Dependency DAG Parsing Transition-based parsing frameworks consider the transition system to be an abstract machine that processes input sentences and produces corresponding parsing graphs. The tokens of the input sequence and the partially created dependency structures are kept within the following data structures: 1. a buffer β which includes the remaining unprocessed tokens in the input sequence in a queue,</note>

			<note place="foot" n="1"> In c = (σ|s, b|β, A), s denotes the top token of the stack σ, b denotes first item of buffer β, A denotes revealed arcs</note>

			<note place="foot" n="2"> Although other schemes could be tried for DAGs for better performance, this is left for future work due to time constraints.</note>

			<note place="foot" n="3"> The difference of this model from the runner-up models are found to be statistically significant according to McNemar&apos;s test (p &lt; 0.0001)</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We hereby acknowledge that this study is part of a research project named "Parsing Web 2.0 Sen-tences" that is supported by T ¨ UB ˙ ITAK (Turkish Scientific and Technological Research Council) 1001 program (grant number 112E276) and part of the ICT COST Action IC 1207.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Conll-x shared task on multilingual dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sabine</forename><surname>Buchholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Marsi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth Conference on Computational Natural Language Learning</title>
		<meeting>the Tenth Conference on Computational Natural Language Learning</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="149" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Machine translation using probabilistic synchronous dependency insertion grammars</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martha</forename><surname>Palmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics</title>
		<meeting>the 43rd Annual Meeting on Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="541" to="548" />
		</imprint>
	</monogr>
	<note>Association for Computational Linguistics</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dependency parsing of Turkish</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gülsgüls¸en</forename><surname>Eryi˘ Git</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kemal</forename><surname>Oflazer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="357" to="389" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A dynamic oracle for arc-eager dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">COLING</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="959" to="976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Training deterministic parsers with non-deterministic oracles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions of the association for Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="403" to="414" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The danish dependency treebank and the underlying linguistic theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Matthias T Kromann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Second Workshop on Treebanks and Linguistic Theories (TLT)</title>
		<meeting>of the Second Workshop on Treebanks and Linguistic Theories (TLT)</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Online learning of approximate dependency parsing algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">N</forename><surname>Fernando</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pereira</surname></persName>
		</author>
		<editor>EACL. Citeseer</editor>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Pseudoprojective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Nilsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics</title>
		<meeting>the 43rd Annual Meeting on Association for Computational Linguistics</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Maltparser: A language-independent system for data-driven dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johan</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Nilsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atanas</forename><surname>Chanev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gülsen</forename><surname>Eryigit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sandra</forename><surname>Kübler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Svetoslav</forename><surname>Marinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Marsi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Natural Language Engineering</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">02</biblScope>
			<biblScope unit="page" from="95" to="135" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Evaluation of dependency parsers on unbounded dependencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><surname>Rimell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd International Conference on Computational Linguistics</title>
		<meeting>the 23rd International Conference on Computational Linguistics</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="833" to="841" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Algorithms for deterministic incremental dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="513" to="553" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Shift-reduce dependency DAG parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenji</forename><surname>Sagae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jun&amp;apos;ichi</forename><surname>Tsujii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd International Conference on Computational Linguistics</title>
		<meeting>the 22nd International Conference on Computational Linguistics</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="753" to="760" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">A redefined Turkish dependency grammar and its implementations: A new Turkish web treebank &amp; the revised Turkish treebank</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>Umut Sulubacak and GülsGüls¸en Eryi˘ git. under review</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Answering natural language questions via phrasal semantic parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kun</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sheng</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yansong</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongyan</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Natural Language Processing and Chinese Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="333" to="344" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Parser evaluation using textual entailments. Language resources and evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deniz</forename><surname>Yuret</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><surname>Rimell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aydın</forename><surname>Han</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page" from="639" to="659" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Analyzing the effect of global learning and beam-search on transition-based dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">COLING (Posters)</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="1391" to="1400" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
