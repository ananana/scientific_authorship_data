<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T11:56+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Learning attention for historical text normalization by learning to pronounce</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>July 30-August 4, 2017. July 30-August 4, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcel</forename><surname>Bollmann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joachim</forename><surname>Bingel</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anders</forename><surname>Søgaard</surname></persName>
						</author>
						<title level="a" type="main">Learning attention for historical text normalization by learning to pronounce</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)</title>
						<meeting>the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers) <address><addrLine>Vancouver, Canada; Vancouver, Canada</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="332" to="344"/>
							<date type="published">July 30-August 4, 2017. July 30-August 4, 2017</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.18653/v1/p17-1031</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Automated processing of historical texts often relies on pre-normalization to modern word forms. Training encoder-decoder architectures to solve such problems typically requires a lot of training data, which is not available for the named task. We address this problem by using several novel encoder-decoder architectures, including a multi-task learning (MTL) architecture using a grapheme-to-phoneme dictionary as auxiliary data, pushing the state-of-the-art by an absolute 2% increase in performance. We analyze the induced models across 44 different texts from Early New High German. Interestingly, we observe that, as previously conjectured, multi-task learning can learn to focus attention during decoding, in ways remarkably similar to recently proposed attention mechanisms. This, we believe, is an important step toward understanding how MTL works.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>There is a growing interest in automated process- ing of historical documents, as evidenced by the growing field of digital humanities and the in- creasing number of digitally available collections of historical documents. A common approach to deal with the high amount of variance often found in this type of data is to perform spelling nor- malization <ref type="bibr">(Piotrowski, 2012)</ref>, which is the map- ping of historical spelling variants to standard- ized/modernized forms (e.g. vnd → und 'and').</p><p>Training data for supervised learning of histor- ical text normalization is typically scarce, mak- ing it a challenging task for neural architec- tures, which typically require large amounts of la- beled data. Nevertheless, we explore framing the spelling normalization task as a character-based sequence-to-sequence transduction problem, and use encoder-decoder recurrent neural networks (RNNs) to induce our transduction models. This is similar to models that have been proposed for neu- ral machine translation (e.g., <ref type="bibr">Cho et al. (2014)</ref>), so essentially, our approach could also be considered a specific case of character-based neural machine translation.</p><p>By basing our model on individual characters as input, we keep the vocabulary size small, which in turn reduces the model's complexity and the amount of data required to train it effectively. Us- ing an encoder-decoder architecture removes the need for an explicit character alignment between historical and modern wordforms. Furthermore, we explore using an auxiliary task for which data is more readily available, namely grapheme-to- phoneme mapping (word pronunciation), to reg- ularize the induction of the normalization models.</p><p>We propose several architectures, including multi-task learning architectures taking advantage of the auxiliary data, and evaluate them across 44 small datasets from Early New High German.</p><p>Contributions Our contributions are as follows:</p><p>• We are, to the best of our knowledge, the first to propose and evaluate encoder-decoder ar- chitectures for historical text normalization.</p><p>• We evaluate several such architectures across 44 datasets of Early New High German.</p><p>• We show that such architectures benefit from bidirectional encoding, beam search, and at- tention.</p><p>• We also show that MTL with pronuncia- tion as an auxiliary task improves the perfor- mance of architectures without attention.</p><p>• We analyze the above architectures and show that the MTL architecture learns attention from the auxiliary task, making the attention mechanism largely redundant.</p><p>• We make our implementation publicly available at https://bitbucket.org/ mbollmann/acl2017.</p><p>In sum, we both push the state-of-the-art in his- torical text normalization and present an analysis that, we believe, brings us a step further in under- standing the benefits of multi-task learning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Datasets</head><p>Normalization For the normalization task, we use a total of 44 texts from the Anselm cor- pus <ref type="bibr">(Dipper and Schultz-Balluff, 2013</ref>) of Early New High German. <ref type="bibr">1</ref> The corpus is a collection of manuscripts and prints of the same core text, a reli- gious treatise. Although the texts are semi-parallel and share some vocabulary, they were written in different time periods (between the 14th and 16th century) as well as different dialectal regions, and show quite diverse spelling characteristics. For ex- ample, the modern German word Frau 'woman' can be spelled as fraw/vraw (Me), frawe (N2), frauwe (St), fraüwe (B2), frow (Stu), vrowe (Ka), vorwe (Sa), or vrouwe (B), among others. <ref type="bibr">2</ref> All texts in the Anselm corpus are manually an- notated with gold-standard normalizations follow- ing guidelines described in <ref type="bibr">Krasselt et al. (2015)</ref>. For our experiments, we excluded texts from the corpus that are shorter than 4,000 tokens, as well as a few for which annotations were not yet avail- able at the time of writing (mostly Low German and Dutch versions). Nonetheless, the remaining 44 texts are still quite short for machine-learning standards, ranging from about 4,200 to 13,200 to- kens, with an average length of 7,350 tokens.</p><p>For all texts, we removed tokens that consisted solely of punctuation characters. We also lower- case all characters, since it helps keep the size of the vocabulary low, and uppercasing of words is usually not very consistent in historical texts. Tok- enization was not an issue for pre-processing these texts, since modern token boundaries have already been marked by the transcribers.</p><p>1 https://www.linguistics.rub.de/ anselm/ 2 We refer to individual texts using the same internal IDs that are found in the Anselm corpus (cf. the website).</p><p>Grapheme-to-phoneme mappings We use learning to pronounce as our auxiliary task. This task consists of learning mappings from sequences of graphemes to the corresponding sequences of phonemes. We use the German part of the CELEX lexical database ( <ref type="bibr">Baayen et al., 1995)</ref>, particu- larly the database of phonetic transcriptions of German wordforms. The database contains a total of 365,530 wordforms with transcriptions in DISC format, which assigns one character to each distinct phonological segment (including affricates and diphthongs). For example, the word Jungfrau 'virgin' is represented as 'jUN-frB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Model</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Base model</head><p>We propose several architectures that are ex- tensions of a base neural network architecture, closely following the sequence-to-sequence model proposed by <ref type="bibr">Sutskever et al. (2014)</ref>. It consists of the following:</p><p>• an embedding layer that maps one-hot input vectors to dense vectors;</p><p>• an encoder RNN that transforms the input se- quence to an intermediate vector of fixed di- mensionality;</p><p>• a decoder RNN whose hidden state is initial- ized with the intermediate vector, and which is fed the output prediction of one timestep as the input for the next one; and</p><p>• a final dense layer with a softmax activation which takes the decoder's output and gener- ates a probability distribution over the output classes at each timestep.</p><p>For the encoder/decoder RNNs, we use long short-term memory units (LSTM) <ref type="bibr">(Hochreiter and Schmidhuber, 1997</ref>). LSTMs are designed to al- low recurrent networks to better learn long-term dependencies, and have proven advantageous to standard RNNs on many tasks. We found no sig- nificant advantage from stacking multiple LSTM layers for our task, so we use the simplest compet- itive model with only a single LSTM unit for both encoder and decoder.</p><p>By using this encoder-decoder model, we avoid the need to generate explicit alignments between the input and output sequences, which would bring up the question of how to deal with input/output  <ref type="figure">Figure 1</ref>: Flow diagram of the base model; left side is the encoder, right side the decoder, the latter of which has an additional prediction layer on top. Multi-task learning variants use two separate prediction layers for main/auxiliary tasks, while sharing the rest of the model. Embedding layers for the inputs are not explicitly shown.</p><p>pairs of different lengths. Another important prop- erty is that the model does not start to generate any output until it has seen the full input sequence, which in theory allows it to learn from any part of the input, without being restricted to fixed context windows. An example illustration of the unrolled network is shown in <ref type="figure">Fig. 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Training</head><p>During training, the encoder inputs are the histor- ical wordforms, while the decoder inputs corre- spond to the correct modern target wordforms. We then train each model by minimizing the cross- entropy loss across all output characters; i.e., if y = (y 1 , ..., y n ) is the correct output word (as a list of one-hot vectors of output characters) andˆy andˆ andˆy = (ˆ y 1 , ..., ˆ y n ) is the model's output, we mini- mize the mean loss − n i=1 y i logˆylogˆ logˆy i over all train- ing samples. For the optimization, we use the Adam algorithm ( <ref type="bibr">Kingma and Ba, 2015</ref>) with a learning rate of 0.003.</p><p>To reduce computational complexity, we also set a maximum word length of 14, and filter all training samples where either the input or output word is longer than 14 characters. This only af- fects 172 samples across the whole dataset, and is only done during training. In other words, we evaluate our models across all the test examples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Decoding</head><p>For prediction, our base model generates output character sequences in a greedy fashion, selecting the character with the highest probability at each timestep. This works fairly well, but the greedy approach can yield suboptimal global picks, in which each individual character is sensibly de- rived from the input, but the overall word is non- sensical. We therefore also experiment with beam search decoding, setting the beam size to 5.</p><p>Finally, we also experiment with using a lexi- cal filter during the decoding step. Here, before picking the next 5 most likely characters during beam search, we remove all characters that would lead to a string not covered by the lexicon. This is again intended to reduce the occurrence of non- sensical outputs. For the lexicon, we use all word forms from CELEX (cf. Sec. 2) plus the target word forms from the training set. <ref type="bibr">3</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Attention</head><p>In our base architecture, we assume that we can decode from a single vector encoding of the input sequence. This is a strong assumption, especially with long input sequences. Attention mechanisms give us more flexibility. The idea is that instead of encoding the entire input sequence into a fixed- length vector, we allow the decoder to "attend" to different parts of the input character sequence at each time step of the output generation. Impor- tantly, we let the model learn what to attend to based on the input sequence and what it has pro- duced so far.</p><p>Our implementation is identical to the decoder with soft attention described by <ref type="bibr">Xu et al. (2015)</ref>. If a = (a 1 , ..., a n ) is the encoder's output and h t is the decoder's hidden state at timestep t, we first calculate a context vectorˆzvectorˆ vectorˆz t as a weighted combi- nation of the output vectors a i :</p><formula xml:id="formula_0">ˆ z t = n i=1 α i a i (1)</formula><p>The weights α i are derived by feeding the en- coder's output and the decoder's hidden state from the previous timestep into a multilayer perceptron, called the attention model (f att ):</p><formula xml:id="formula_1">α = sof tmax(f att (a, h t−1 ))<label>(2)</label></formula><p>We then modify the decoder by conditioning its internal states not only on the previous hid- den state h t−1 and the previously predicted output character y t−1 , but also on the context vectorˆzvectorˆ vectorˆz t :</p><formula xml:id="formula_2">i t = σ(W i [h t−1 , y t−1 , ˆ z t ] + b i ) f t = σ(W f [h t−1 , y t−1 , ˆ z t ] + b f ) o t = σ(W o [h t−1 , y t−1 , ˆ z t ] + b o ) g t = tanh(W g [h t−1 , y t−1 , ˆ z t ] + b g ) c t = f t c t−1 + i t g t h t = o t tanh(c t )<label>(3)</label></formula><p>In Eq. 3, we follow the traditional LSTM de- scription consisting of input gate i t , forget gate f t , output gate o t , cell state c t and hidden state h t , where W and b are trainable parameters.</p><p>For all experiments including an attentional de- coder, we use a bi-directional encoder, comprised of one LSTM layer that reads the input sequence normally and another LSTM layer that reads it backwards, and attend over the concatenated out- puts of these two layers.</p><p>While a precise alignment of input and output sequences is sometimes difficult, most of the time the sequences align in a sequential order, which can be exploited by an attentional component.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Multi-task learning</head><p>Finally, we introduce a variant of the base archi- tecture, with or without beam search, that does multi-task learning <ref type="bibr">(Caruana, 1993</ref>). The multi- task architecture only differs from the base archi- tecture in having two classifier functions at the outer layer, one for each of our two tasks. Our aux- iliary task is to predict a sequence of phonemes as the correct pronunciation of an input sequence of graphemes. This choice is motivated by the rela- tionship between phonology and orthography, in particular the observation that spelling variation often stems from phonological variation.</p><p>We train our multi-task learning architecture by alternating between the two tasks, sampling one instance of the auxiliary task for each training sample of the main task. We use the encoder- decoder to generate a corresponding output se- quence, whether a modern word form or a pronun- ciation. Doing so, we suffer a loss with respect to the true output sequence and update the model pa- rameters. The update for a sample from a specific task affects the parameters of corresponding clas- sifier function, as well as all the parameters of the shared hidden layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Hyperparameters</head><p>We used a single manuscript (B) for manually evaluating and setting the hyperparameters. This manuscript is left out of the averages reported be- low. We believe that using a single manuscript for development, and using the same hyperparameters across all manuscripts, is more realistic, as we of- ten do not have enough data in historical text nor- malization to reliably tune hyperparameters.</p><p>For the final evaluation, we set the size of the embedding and the recurrent LSTM layers to 128, applied a dropout of 0.3 to the input of each recur- rent layer, and trained the model on mini-batches with 50 samples each for a total of 50 epochs (in the multi-task learning setup, mini-batches contain 50 samples of each task, and epochs are counted by the size of the training set for the main task only). All these parameters were set on the B manuscript alone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Implementation</head><p>We implemented all of the models in Keras <ref type="bibr">(Chollet, 2015</ref>). Any parameters not explicitly de- scribed here were left at their default values in Keras v1.0.8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>We split up each text into three parts, using 1,000 tokens each for a test set and a development set (that is not currently used), and the remainder of the text (between 2,000 and 11,000 tokens) for training. We then train and evaluate on each of the 43 texts (excluding the B text that was used for hyper-parameter tuning) individually.</p><p>Baselines We compare our architectures to sev- eral competitive baselines. Our first baseline is an averaged perceptron model trained to predict output character n-grams for each input character, after using Levenshtein alignment with generated segment distances ( <ref type="bibr">Wieling et al., 2009</ref>  <ref type="table">Table 1</ref>: Average word accuracy across 43 texts from the Anselm dataset, evaluated on the first 1,000 to- kens of each text. Evaluation on the base encoder-decoder model (Sec. 3.1) with greedy search, beam search (k = 5) and/or lexical filtering (Sec. 3.3), with attentional decoder (Sec. 3.4), and the multi-task learning (MTL) model using grapheme-to-phoneme mappings (Sec. 3.5).</p><p>deep bi-LSTM sequential tagger, following Boll- mann and Søgaard (2016). We evaluate this tag- ger using both standard and multi-task learning. Finally, we compare our model to the rule-based and Levenshtein-based algorithms provided by the Norma tool (Bollmann, 2012). 4</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Word accuracy</head><p>We use word-level accuracy as our evaluation metric. While we also measure character-level metrics, minor differences on character level can cause large differences in downstream applica- tions, so we believe that perfectly matching the output sequences is more useful. Average scores across all 43 texts are presented in <ref type="table">Table 1</ref> (see Appendix A for individual scores).</p><p>We first see that almost all our encoder-decoder architectures perform significantly better than the four state-of-the-art baselines. All our architec- tures perform better than Norma and the averaged perceptron, and all the MTL architectures outper- form <ref type="bibr">Bollmann and Søgaard (2016)</ref>.</p><p>We also see that beam search, filtering, and at- tention lead to cumulative gains in the context of the single-task architecture -with the best archi- tecture outperforming the state-of-the-art by al- most 3% in absolute terms.</p><p>For our multi-task architecture, we also observe gains when we add beam search and filtering, but importantly, adding attention does not help. In fact, attention hurts the performance of our multi- task architecture quite significantly. Also note that the multi-task architecture without attention performs on-par with the single-task architecture with attention.</p><p>We hypothesize that the reason for this pattern, which is not only observed in the average scores in <ref type="table">Table 1</ref>, but also quite consistent across the indi- vidual results in Appendix A, is that our multi-task learning already learns how to focus attention. This is the hypothesis that we will try to vali- date in Sec. 5: That multi-task learning can induce strategies for focusing attention comparable to at- tention strategies for recurrent neural networks.</p><p>Sample predictions A small selection of pre- dictions from our models is shown in <ref type="table" target="#tab_3">Table 2</ref>. They serve to illustrate the effects of the various settings; e.g., the base model with greedy search tends to produce more nonsense words (ters, üns- get) than the others. Using a lexical filter helps the most in this regard: the base model with fil- tering correctly normalizes ergieng to erging '(he) fared', while decoding without a filter produces the non-word erbiggen. Even for herczenlichen (modern herzlichen 'heartfelt'), where no model finds the correct target form, only the model with filtering produces a somewhat reasonable alterna- tive (herzgeliebtes 'heartily loved').</p><p>In some cases (such as gewarnet 'warned'),  only the models with attention or multi-task learn- ing produce the correct normalization, but even when they are wrong, they often agree on the pre- diction (e.g. dicke, herzel). We will investigate this property further in Sec. 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Learned vector representations</head><p>To gain further insights into our model, we created t-SNE projections <ref type="bibr">(Maaten and Hinton, 2008)</ref> of vector representations learned on the M4 text. <ref type="figure">Fig. 2</ref> shows the learned character embed- dings. In the representations from the base model <ref type="figure">(Fig. 2a)</ref>, characters that are often normalized to the same target character are indeed grouped closely together: e.g., historical &lt;v&gt; and &lt;u&gt; (and, to a smaller extent, &lt;f&gt;) are often used in- terchangeably in the M4 text. Note the wide sepa- ration of &lt;n&gt; and &lt;m&gt;, which is a feature of M4 that does not hold true for all of the texts, as these do not always display a clear distinction between nasals. On the other hand, the MTL model shows a better generalization of the training data <ref type="figure">(Fig. 2b)</ref>: here, &lt;u&gt; is grouped closer to other vowel charac- ters and far away from &lt;v&gt;/&lt;f&gt;. Also, &lt;n&gt; and &lt;m&gt; are now in close proximity.</p><p>We can also visualize the internal word rep- resentations that are produced by the encoder <ref type="figure">(Fig. 3)</ref>. Here, we chose words that demonstrate the interchangeable use of &lt;u&gt; and &lt;v&gt;. Histor- ical vnd, vns, vmb become modern und, uns, um, changing the &lt;v&gt; to &lt;u&gt;. However, the represen- tation of vmb learned by the base model is closer to forms like von, vor, uor, all starting with &lt;v&gt; in the target normalization. In the MTL model, how- ever, these examples are indeed clustered together.</p><p>5 Analysis: Multi-task learning helps focus attention <ref type="table">Table 1</ref> shows that models which employ either an attention mechanism or multi-task learning obtain similar improvements in word accuracy. However, we observe a decline in word accuracy for models that combine multi-task learning with attention.</p><p>A possible interpretation of this counter- intuitive pattern might be that attention and MTL, to some degree, learn similar functions of the in- put data, a conjecture by <ref type="bibr">Caruana (1998)</ref>. We put this hypothesis to the test by closely investigating properties of the individual models below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Model parameters</head><p>First, we are interested in the weight parameters of the final layer that transforms the decoder output to class probabilities. We consider these parame- ters for our standard encoder-decoder model and compare them to the weights that are learned by the attention and multi-task models, respectively. <ref type="bibr">5</ref> Note that hidden layer parameters are not neces- sarily comparable across models, but with a fixed seed, differences in parameters over a reference model may be (and are, in our case). With a fixed seed, and iterating over data points in the same or- der, it is conceivable the two non-baselines end up in roughly the same alternative local optimum (or at least take comparable routes).</p><p>We observe that the weight differences between the standard and the attention model correlate with the differences between the standard and multi- task model by a Pearson's r of 0.346, averaged across datasets, with a standard deviation of 0.315; on individual datasets, correlation coefficient is as  high as 96. <ref type="figure">Figure 4</ref> illustrates these highly paral- lel weight changes for the different models when trained on the N4 dataset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Final output</head><p>Next, we compare the effect that employing either an attention mechanism or multi-task learning has on the actual output of our system. We find that out of the 210.9 word errors that the base model pro- duces on average across all test sets (comprising 1,000 tokens each), attention resolves 47.7, while multi-task learning resolves an average of 45.4 er- rors. Crucially, the overlap of errors that are re- solved by both the attention and the MTL model amounts to 27.7 on average. Attention and multi-task also introduce new er- rors compared to the base model <ref type="bibr">(26.6 and 29.5</ref> per test set, respectively), and again we can ob- serve a relatively high agreement of the models (11.8 word errors are introduced by both models).</p><p>Finally, the attention and multi-task models dis- play a word-level agreement of κ=0.834 (Co- hen's kappa), while either of these models is less strongly correlated with the base model (κ=0.817 for attention and κ=0.814 for multi-task learning).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Saliency analysis</head><p>Our last analysis regards the saliency of the input timesteps with respect to the predictions of our models. We follow <ref type="bibr">Li et al. (2016)</ref> in calculat- ing first-derivative saliency for given input/output pairs and compare the scores from the differ- ent models. The higher the saliency of an input timestep, the more important it is in determining the model's prediction at a given output timestep. Therefore, if two models produce similar saliency matrices for a given input/output pair, they have learned to focus on similar parts of the input dur- ing the prediction. Our hypothesis is that the at- tentional and the multi-task learning model should be more similar in terms of saliency scores than either of them compared to the base model. <ref type="figure" target="#fig_1">Figure 5</ref> shows a plot of the saliency matrices generated from the word pair czeychen -zeichen 'sign'. Here, the scores for the attentional and the MTL model indeed correlate by ρ = 0.615, while those for the base model do not correlate with either of them. A systematic analysis across 19,000 word pairs (where all models agree on the output) shows that this effect only holds for longer input sequences (≥ 7 characters), with a mean ρ = 0.303 (±0.177) for attentional vs. MTL model, while the base model correlates with either of them by ρ &lt; 0.21.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Many traditional approaches to spelling normal- ization of historical texts use edit distances or some form of character-level rewrite rules, hand- crafted ( <ref type="bibr">Baron and Rayson, 2008)</ref> or learned auto- matically <ref type="bibr">(Bollmann, 2013;</ref><ref type="bibr">Porta et al., 2013)</ref>.</p><p>A more recent approach is based on character- based statistical machine translation applied to historical text ( <ref type="bibr">Pettersson et al., 2013;</ref><ref type="bibr">SánchezMartínez et al., 2013;</ref><ref type="bibr">Scherrer and Erjavec, 2013;</ref><ref type="bibr">Ljubeši´cLjubeši´c et al., 2016</ref>) or dialectal data ( <ref type="bibr">Scherrer and Ljubeši´cLjubeši´c, 2016)</ref>. This is conceptually very similar to our approach, except that we substi- tute the classical SMT algorithms for neural net- works. Indeed, our models can be seen as a form of character-based neural MT ( <ref type="bibr">Cho et al., 2014)</ref>.</p><p>Neural networks have rarely been applied to historical spelling normalization so far. <ref type="bibr">Azawi et al. (2013)</ref> normalize old Bible text using bi- directional LSTMs with a layer that performs alignment between input and output wordforms. <ref type="bibr">Bollmann and Søgaard (2016)</ref> also use bi-LSTMs to frame spelling normalization as a character- based sequence labelling task, performing charac- ter alignment as a preprocessing step. Multi-task learning was shown to be effective for a variety of NLP tasks, such as POS tagging, chunking, named entity recognition <ref type="bibr">(Collobert et al., 2011</ref>) or sentence compression ( <ref type="bibr">Klerke et al., 2016)</ref>. It has also been used in encoder- decoder architectures, typically for machine trans- lation ( <ref type="bibr">Dong et al., 2015;</ref><ref type="bibr">Luong et al., 2016)</ref>, though so far not with attentional decoders.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>We presented an approach to historical spelling normalization using neural networks with an encoder-decoder architecture, and showed that it consistently outperforms several existing base- lines. Encouragingly, our work proves to be fully competitive with the sequence-labeling approach by <ref type="bibr">Bollmann and Søgaard (2016)</ref>, without requir- ing a prior character alignment.</p><p>Specifically, we demonstrated the aptitude of multi-task learning to mitigate the shortage of training data for the named task. We included a multifaceted analysis of the effects that MTL in- troduces to our models and the resemblance that it bears to attention mechanisms. We believe that this analysis is a valuable contribution to the understanding of MTL approaches also beyond spelling normalization, and we are confident that our observations will stimulate further research into the relationship between MTL and attention.</p><p>Finally, many improvements to the presented approach are conceivable, most notably introduc- ing some form of token context to the model. Cur- rently, we only consider word forms in isolation, which is problematic for ambiguous cases (such as jn, which can normalize to in 'in' or ihn 'him') and conceivably makes the task harder for oth- ers. Reranking the predictions with a language model could be one possible way to improve on this. Ljubeši´c <ref type="bibr">Ljubeši´c et al. (2016)</ref>, for example, exper- iment with segment-based normalization, using a character-based SMT model with character in- put derived from segments (essentially, token n- grams) instead of single tokens, which also intro- duces context. Such an approach could also deal with the issue of tokenization differences between the historical and the modern text, which is an- other challenge often found in datasets of histori- cal text.</p><p>annotation criteria and automatic modernisation of spelling. http://arxiv.org/abs/1306.3692v1.</p><p>Martijn Wieling, Jelena Proki´cProki´c, and John Nerbonne.</p><p>2009.</p><p>Evaluating the pairwise string align- ment of pronunciations. In Proceedings of the EACL 2009 Workshop on Language Technology and Resources for Cultural Heritage, Social Sci- ences, <ref type="bibr">Humanities, and Education (LaTeCH - SHELT&amp;R 2009</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Supplementary Material</head><p>For interested parties, we provide our full evalua- tion results for each single text in our dataset. <ref type="table">Ta- ble 3</ref> shows token counts, a rough classification of each text's dialectal region, and the results for the baseline methods.  <ref type="table">Table 3</ref>: Word accuracy on the Anselm dataset, evaluated on the first 1,000 tokens, using the baseline models (cf. Sec. 4): the Norma tool <ref type="bibr">(Bollmann, 2012)</ref>, an averaged perceptron model, and a deep bi- LSTM sequential tagger ( <ref type="bibr">Bollmann and Søgaard, 2016</ref>  <ref type="table" target="#tab_5">Table 4</ref>: Word accuracy on the Anselm dataset, evaluated on the first 1,000 tokens, using our base encoder-decoder model (Sec. 3) and the multi-task model. G = greedy decoding, B = beam-search de- coding (with beam size 5), F = lexical filter, A = attentional model. Best results (also taking into account the baseline results from <ref type="table">Table 3</ref>) shown in bold.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :Figure 4 :</head><label>24</label><figDesc>Figure 2: t-SNE projections (with perplexity 7) of character embeddings from models trained on M4</figDesc><graphic url="image-3.png" coords="7,106.00,255.82,185.95,145.31" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: First-derivative saliency w.r.t. the input sequence, as calculated from the base model (left), the attentional model (center), and the MTL model (right). The scores for the attentional and the multi-task model correlate by ρ = 0.615, while the correlation of either one with the base model is |ρ| &lt; 0.12.</figDesc><graphic url="image-6.png" coords="8,93.21,62.81,411.12,131.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Selected predictions from some of our models on the M4 text; B = BEAM, F = FILTER, A = AT-

TENTION. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head></head><label></label><figDesc>). Athens, Greece, pages 26-34. http://dl.acm.org/citation.cfm?id=1642049.1642053.</figDesc><table>Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun 
Cho, Aaron Courville, Ruslan Salakhudinov, Rich 
Zemel, and Yoshua Bengio. 2015. 
Show, at-
tend and tell: Neural image caption genera-
tion with visual attention. In JMLR Workshop 
and Conference Proceedings: Proceedings of the 
32nd International Conference on Machine Learn-
ing. Lille, France, volume 37, pages 2048-2057. 
http://proceedings.mlr.press/v37/xuc15.pdf. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 presents</head><label>4</label><figDesc>the full results for our encoder-decoder models.</figDesc><table>ID 

Region 
Tokens Norma Avg. Perc. Bi-LSTM Tagger 

BASE 
MTL 

B 
East Central 
4,718 79.60% 
76.30% 79.20% 78.82% 
D3 
East Central 
5,704 79.70% 
77.20% 80.10% 81.62% 
H 
East Central 
8,427 83.00% 
78.60% 85.00% 84.32% 

B2 
West Central 
9,145 76.20% 
74.60% 82.00% 80.12% 
KÄ1492 
West Central 
7,332 78.40% 
74.80% 81.60% 80.82% 
KJ1499 
West Central 
7,330 77.00% 
73.50% 84.50% 80.22% 
N1500 
West Central 
7,272 77.60% 
72.70% 79.00% 78.52% 
N1509 
West Central 
7,418 78.40% 
74.30% 80.80% 80.02% 
N1514 
West Central 
7,412 78.50% 
72.20% 79.00% 79.62% 
St 
West Central 
7,407 73.30% 
70.30% 75.50% 73.03% 

D4 
Upper/Central 
5,806 76.10% 
72.40% 76.50% 76.62% 
N4 
Upper 
8,593 79.30% 
80.00% 81.80% 82.52% 
s1496/97 
Upper 
5,840 81.20% 
77.70% 83.00% 82.62% 

B3 
East Upper 
6,222 82.30% 
79.50% 81.50% 83.02% 
Hk 
East Upper 
8,690 79.10% 
78.20% 80.90% 79.52% 
M 
East Upper 
8,700 75.20% 
72.80% 83.90% 82.72% 
M2 
East Upper 
8,729 76.30% 
75.10% 76.70% 79.32% 
M3 
East Upper 
7,929 79.20% 
77.30% 80.40% 81.52% 
M5 
East Upper 
4,705 81.60% 
76.40% 77.70% 76.92% 
M6 
East Upper 
4,632 74.90% 
73.70% 75.20% 75.72% 
M9 
East Upper 
4,739 81.00% 
79.00% 80.40% 79.32% 
M10 
East Upper 
4,379 77.20% 
76.00% 75.10% 75.92% 
Me 
East Upper 
4,560 80.20% 
76.90% 80.30% 79.12% 
Sb 
East Upper 
7,218 79.60% 
75.70% 80.00% 80.12% 
T 
East Upper 
8,678 76.00% 
73.40% 75.80% 73.43% 
W 
East Upper 
8,217 77.60% 
78.20% 81.40% 80.72% 
We 
East Upper 
6,661 82.70% 
78.60% 81.50% 82.22% 

Ba 
North Upper 
5,934 79.10% 
80.20% 80.70% 80.02% 
Ba2 
North Upper 
5,953 80.70% 
78.10% 82.50% 82.12% 
M4 
North Upper 
8,574 76.70% 
75.70% 79.40% 79.32% 
M7 
North Upper 
4,638 78.60% 
75.60% 78.20% 77.42% 
M8 
North Upper 
8,275 79.30% 
78.20% 81.10% 80.02% 
n 
North Upper 
9,191 79.80% 
81.90% 84.40% 84.62% 
N 
North Upper 
13,285 74.00% 
71.70% 79.00% 79.42% 
N2 
North Upper 
7,058 82.80% 
80.30% 84.30% 81.72% 
N3 
North Upper 
4,192 78.10% 
76.40% 77.60% 77.12% 

Be 
West Upper 
8,203 74.90% 
75.30% 78.80% 77.52% 
Ka 
West Upper 
12,641 72.80% 
75.40% 80.10% 81.62% 
SG 
West Upper 
7,838 79.70% 
78.00% 81.70% 81.12% 
Sa 
West Upper 
8,668 71.50% 
71.90% 76.10% 74.93% 
Sa2 
West Upper 
8,834 77.60% 
73.50% 79.50% 79.72% 
St2 
West Upper 
8,686 72.80% 
73.20% 78.20% 79.92% 
Stu 
West Upper 
8,011 78.00% 
76.50% 79.40% 79.62% 

Le 
Dutch 
7,087 71.30% 
65.00% 75.60% 75.12% 

Average (-B) 
7,353 77.89% 
76.30% 79.91% 79.56% 

</table></figure>

			<note place="foot" n="3"> We observe that due to this filtering, we cannot reach 2.25% of the targets in our test set, most of which are Latin word forms.</note>

			<note place="foot" n="4"> https://github.com/comphist/norma</note>

			<note place="foot" n="5"> For the multi-task models, this analysis disregards those dimensions that do not correspond to classes in the main task.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Marcel Bollmann was supported by Deutsche Forschungsgemeinschaft (DFG), Grant DI 1558/4. This research is further supported by ERC Start-ing Grant LOWLANDS No. 313695, as well as by Trygfonden.</p></div>
			</div>

			<div type="annex">
			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
