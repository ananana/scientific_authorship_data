<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T12:42+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Arc-swift: A Novel Transition System for Dependency Parsing</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>July 30-August 4, 2017. July 30-August 4, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peng</forename><surname>Qi</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
						</author>
						<title level="a" type="main">Arc-swift: A Novel Transition System for Dependency Parsing</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers)</title>
						<meeting>the 55th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers) <address><addrLine>Vancouver, Canada; Vancouver, Canada</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="110" to="117"/>
							<date type="published">July 30-August 4, 2017. July 30-August 4, 2017</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.18653/v1/p17-2018</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Transition-based dependency parsers often need sequences of local shift and reduce operations to produce certain attachments. Correct individual decisions hence require global information about the sentence context and mistakes cause error propagation. This paper proposes a novel transition system, arc-swift, that enables direct attachments between tokens farther apart with a single transition. This allows the parser to leverage lexical information more directly in transition decisions. Hence, arc-swift can achieve significantly better performance with a very small beam size. Our parsers reduce error by 3.7-7.6% relative to those using existing transition systems on the Penn Tree-bank dependency parsing task and English Universal Dependencies.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Dependency parsing is a longstanding natural lan- guage processing task, with its outputs crucial to various downstream tasks including relation ex- traction ( <ref type="bibr" target="#b12">Schmitz et al., 2012;</ref><ref type="bibr" target="#b1">Angeli et al., 2015)</ref>, language modeling <ref type="bibr">(Gubbins and Vlachos, 2013)</ref>, and natural logic inference <ref type="bibr">(Bowman et al., 2016)</ref>.</p><p>Attractive for their linear time complexity and amenability to conventional classification meth- ods, transition-based dependency parsers have sparked much research interest recently. A transition-based parser makes sequential predic- tions of transitions between states under the re- strictions of a transition system <ref type="bibr" target="#b7">(Nivre, 2003)</ref>. Transition-based parsers have been shown to excel at parsing shorter-range dependency structures, as well as languages where non-projective parses are less pervasive <ref type="bibr" target="#b6">(McDonald and Nivre, 2007</ref> Figure 1: An example of the state of a transition- based dependency parser, and the transition se- quences used by arc-eager and arc-swift to induce the correct parse. The state shown is generated by the first six transitions of both systems.</p><p>However, the transition systems employed in state-of-the-art dependency parsers usually define very local transitions. At each step, only one or two words are affected, with very local attach- ments made. As a result, distant attachments re- quire long and not immediately obvious transi- tion sequences (e.g., ate→chopsticks in <ref type="figure">Figure 1</ref>, which requires two transitions). This is further ag- gravated by the usually local lexical information leveraged to make transition predictions <ref type="bibr">(Chen and Manning, 2014;</ref><ref type="bibr" target="#b0">Andor et al., 2016)</ref>.</p><p>In this paper, we introduce a novel transition system, arc-swift, which defines non-local transi- tions that directly induce attachments of distance up to n (n = the number of tokens in the sentence). Such an approach is connected to graph-based dependency parsing, in that it leverages pairwise scores between tokens in making parsing deci- sions ( <ref type="bibr" target="#b5">McDonald et al., 2005</ref>).</p><p>We make two main contributions in this paper. Firstly, we introduce a novel transition system for dependency parsing, which alleviates the difficulty of distant attachments in previous systems by al- lowing direct attachments anywhere in the stack. Secondly, we compare parsers by the number of mistakes they make in common linguistic con- structions. We show that arc-swift parsers reduce errors in attaching prepositional phrases and con- junctions compared to parsers using existing tran- sition systems.</p><formula xml:id="formula_0">arc-standard arc-hybrid Shift (σ, i|β, A) ⇒ (σ|i, β, A) LArc (σ|i|j, β, A) ⇒ (σ|j, β, A ∪ {(j → i)}) RArc (σ|i|j, β, A) ⇒ (σ|i, β, A ∪ {(i → j)}) Shift (σ, i|β, A) ⇒ (σ|i, β, A) LArc (σ|i, j|β, A) ⇒ (σ, j|β, A ∪ {(j → i)}) RArc (σ|i|j, β, A) ⇒ (σ|i, β, A ∪ {(i → j)}) arc-eager arc-swift Shift (σ, i|β, A) ⇒ (σ|i, β, A) LArc (σ|i, j|β, A) ⇒ (σ, j|β, A ∪ {(j → i)}) RArc (σ|i, j|β, A) ⇒ (σ|i|j, β, A ∪ {(i → j)}) Reduce (σ|i, β, A) ⇒ (σ, β, A) Shift (σ, i|β, A) ⇒ (σ|i, β, A) LArc[k] (σ|i k | . . . |i 1 , j|β, A) ⇒ (σ, j|β, A ∪ {(j → i k )}) RArc[k] (σ|i k | . . . |i 1 , j|β, A) ⇒ (σ|i k |j, β, A ∪ {(i k → j)})</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Transition-based Dependency Parsing</head><p>Transition-based dependency parsing is performed by predicting transitions between states (see <ref type="figure">Fig- ure 1</ref> for an example). Parser states are usu- ally written as (σ|i, j|β, A), where σ|i denotes the stack with token i on the top, j|β denotes the buffer with token j at its leftmost, and A the set of dependency arcs. Given a state, the goal of a de- pendency parser is to predict a transition to a new state that would lead to the correct parse. A tran- sition system defines a set of transitions that are sound and complete for parsers, that is, every tran- sition sequence would derive a well-formed parse tree, and every possible parse tree can also be de- rived from some transition sequence. 1 Arc-standard <ref type="bibr" target="#b8">(Nivre, 2004</ref>) is one of the first transition systems proposed for dependency pars- ing. It defines three transitions: shift, left arc (LArc), and right arc (RArc) (see <ref type="figure" target="#fig_0">Figure 2</ref> for defi- nitions, same for the following transition systems), where all arc-inducing transitions operate on the stack. This system builds the parse bottom-up, i.e., a constituent is only attached to its head after it has received all of its dependents. A potential draw- back is that during parsing, it is difficult to predict if a constituent has consumed all of its right de- pendents. Arc-eager <ref type="bibr" target="#b7">(Nivre, 2003)</ref> remedies this drawback by defining arc-inducing transitions that operate between the stack and the buffer. As a re- sult, a constituent no longer needs to be complete before it can be attached to its head to the left, as a right arc doesn't prevent the attached depen- dent from taking further dependents of its own. 2 <ref type="bibr" target="#b3">Kuhlmann et al. (2011)</ref> propose a hybrid system derived from a tabular parsing scheme, which they have shown both arc-standard and arc-eager can be derived from. Arc-hybrid combines LArc from arc-eager and RArc from arc-standard to build dependencies bottom-up.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Non-local Transitions with arc-swift</head><p>The traditional transition systems discussed in Section 2 only allow very local transitions affect- ing one or two words, which makes long-distance dependencies difficult to predict. To illustrate the limitation of local transitions, consider parsing the following sentences:</p><p>I ate fish with ketchup. I ate fish with chopsticks. The two sentences have almost identical struc- tures, with the notable difference that the prepo- sitional phrase is complementing the direct object in the first case, and the main verb in the second.</p><p>For arc-standard and arc-hybrid, the parser would have to decide between Shift and RArc when the parser state is as shown in <ref type="figure">Figure 3a</ref>, where stands for either "ketchup" or "chop- sticks". 3 Similarly, an arc-eager parser would deal with the state shown in <ref type="figure">Figure 3b</ref>. Making the cor- rect transition requires information about context words "ate" and "fish", as well as "". Figure 3: Parser states that present difficult tran- sition decisions in traditional systems. In these states, parsers would need to incorporate context about "ate", "fish", and "" to make the correct local transition.</p><p>Parsers employing traditional transition systems would usually incorporate more features about the context in the transition decision, or employ beam search during parsing <ref type="bibr">(Chen and Manning, 2014;</ref><ref type="bibr" target="#b0">Andor et al., 2016)</ref>.</p><p>In contrast, inspired by graph-based parsers, we propose arc-swift, which defines non-local tran- sitions as shown in <ref type="figure" target="#fig_0">Figure 2</ref>. This allows direct comparison of different attachment points, and provides a direct solution to parsing the two exam- ple sentences. When the arc-swift parser encoun- ters a state identical to <ref type="figure">Figure 3b</ref>, it could directly compare transitions RArc <ref type="bibr">[1]</ref> and RArc <ref type="bibr">[2]</ref> instead of evaluating between local transitions. This re- sults in a direct attachment much like that in a graph-based parser, informed by lexical informa- tion about affinity of the pairs of words.</p><p>Arc-swift also bears much resemblance to arc- eager. In fact, an LArc[k] transition can be viewed as k − 1 Reduce operations followed by one LArc in arc-eager, and similarly for RArc <ref type="bibr">[k]</ref>. Reduce is no longer needed in arc-swift as it becomes part of <ref type="bibr">LArc[k]</ref> and RArc <ref type="bibr">[k]</ref>, removing the ambiguity in derived transitions in arc-eager. arc-swift is also equivalent to arc-eager in terms of soundness and completeness. <ref type="bibr">4</ref> A caveat is that the worst-case time complexity of arc-swift is O(n 2 ) instead of O(n), which existing transition-based parsers en- joy. However, in practice the runtime is nearly linear, thanks to the usually small number of re- ducible tokens in the stack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data and Model</head><p>We use the Wall Street Journal portion of Penn Treebank with standard parsing splits (PTB- SD), along with Universal Dependencies v1.3 (Nivre et al., 2016) (EN-UD). PTB-SD is con- verted to Stanford Dependencies (De Marneffe and Manning, 2008) with CoreNLP 3.3.0 ( ) following previous work. We report labelled and unlabelled attachment scores (LAS/UAS), removing punctuation from all eval- uations.</p><p>Our model is very similar to that of <ref type="bibr">(Kiperwasser and Goldberg, 2016)</ref>, where features are extracted from tokens with bidirectional LSTMs, and concatenated for classification. For the three traditional transition systems, features of the top 3 tokens on the stack and the leftmost token in the buffer are concatenated as classifier input. For arc-swift, features of the head and dependent to- kens for each arc-inducing transition are concate- nated to compute scores for classification, and fea- tures of the leftmost buffer token is used for Shift. For other details we defer to Appendix A. The full specification of the model can also be found in our released code online at https://github. com/qipeng/arc-swift.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results</head><p>We use static oracles for all transition systems, and for arc-eager we implement oracles that always Shift/Reduce when ambiguity is present (arc- eager-S/R). We evaluate our parsers with greedy parsing (i.e., beam size 1). The results are shown in <ref type="table">Table 1</ref>. <ref type="bibr">5</ref> Note that K&amp;G 2016 is trained with a dynamic oracle (Goldberg and Nivre, 2012), An- dor 2016 with a CRF-like loss, and both Andor 2016 and Weiss 2015 employed beam search (with sizes 32 and 8, respectively).</p><p>For each pair of the systems we implemented, we studied the statistical significance of their dif- ference by performing a paired test with 10,000 bootstrap samples on PTB-SD. The resulting p- values are analyzed with a 10-group Bonferroni- Holm test, with results shown in  <ref type="table" target="#tab_1">Table 2</ref>: Significance test for transition systems. Each grid shows adjusted test result for UAS and LAS, respectively, showing whether the system on the row is significantly better than that on the col- umn. "***" stands for p &lt; 0.001, "**" p &lt; 0.01, "*" p &lt; 0.05, and "-" p ≥ 0.05.</p><formula xml:id="formula_1">asw ***/*** ***/*** ***/*** ***/*** aeS -/- -/- */- asd -/- */- ah -/-</formula><p>that with almost the same implementation, arc- swift parsers significantly outperform those using traditional transition systems. We also analyzed the performance of parsers on attachments of dif- ferent distances. As shown in <ref type="figure">Figure 4</ref>, arc-swift is equally accurate as existing systems for short dependencies, but is more robust for longer ones. While arc-swift introduces direct long-distance transitions, it also shortens the overall sequence necessary to induce the same parse. A parser could potentially benefit from both factors: direct attach- ments could make an easier classification task, and shorter sequences limit the effect of error propa- gation. However, since the two effects are corre- lated in a transition system, precise attribution of the gain is out of the scope of this paper.</p><p>Computational efficiency. We study the com- putational efficiency of the arc-swift parser by <ref type="bibr">6</ref> https://github.com/tensorflow/models/ blob/master/syntaxnet/g3doc/universal.md Dependency Length Attachment error (%) asd aeS aeR ah asw <ref type="figure">Figure 4</ref>: Parser attachment errors on PTB-SD binned by the length of the gold dependency.</p><p>comparing it to an arc-eager parser. On the PTB- SD development set, the average transition se- quence length per sentence of arc-swift is 77.5% of that of arc-eager. At each step of parsing, arc-swift needs to evaluate only about 1.24 times the number of transition candidates as arc-eager, which results in very similar runtime. In contrast, beam search with beam size 2 for arc-eager re- quires evaluating 4 times the number of transition candidates compared to greedy parsing, which re- sults in a UAS 0.14% worse and LAS 0.22% worse for arc-eager compared to greedily decoded arc- swift.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Linguistic Analysis</head><p>We automatically extracted all labelled attachment errors by error type (incorrect attachment or re- lation), and categorized a few top parser errors by hand into linguistic constructions. Results on PTB-SD are shown in <ref type="table" target="#tab_2">Table 3</ref>. <ref type="bibr">7</ref> We note that the arc-swift parser improves accuracy on prepo- sitional phrase (PP) and conjunction attachments, while it remains comparable to other parsers on other common errors. Analysis on EN-UD shows a similar trend. As shown in the table, there are still many parser errors unaccounted for in our analysis. We leave this to future work.  <ref type="table" target="#tab_1">PP attachment  545  569  571  Noun/Adjective confusion  221  230  221  Conjunction attachment  156  170  164  Adverbial attachment  123  122  143</ref> Total Errors 3884 4100 4106 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Previous work has also explored augmenting transition systems to facilitate longer-range at- tachments. <ref type="bibr" target="#b2">Attardi (2006)</ref> extended the arc- standard system for non-projective parsing, with arc-inducing transitions that are very similar to those in arc-swift. A notable difference is that their transitions retain tokens between the head and dependent. <ref type="bibr">Fernández-González and GómezRodríguez (2012)</ref> augmented the arc-eager sys- tem with transitions that operate on the buffer, which shorten the transition sequence by reduc- ing the number of Shift transitions needed. How- ever, limited by the sparse feature-based classi- fiers used, both of these parsers just mentioned only allow direct attachments of distance up to 3 and 2, respectively. More recently, <ref type="bibr" target="#b11">Sartorio et al. (2013)</ref> extended arc-standard with transitions that directly attach to left and right "spines" of the top two nodes in the stack. While this work shares very similar motivations as arc-swift, it requires additional data structures to keep track of the left and right spines of nodes. This transition system also introduces spurious ambiguity where multiple transition sequences could lead to the same cor- rect parse, which necessitates easy-first training to achieve a more noticeable improvement over arc- standard. In contrast, arc-swift can be easily im- plemented given the parser state alone, and does not give rise to spurious ambiguity. For a comprehensive study of transition sys- tems for dependency parsing, we refer the reader to <ref type="bibr">(Bohnet et al., 2016)</ref>, which proposed a gener- alized framework that could derive all of the tra- ditional transition systems we described by con- figuring the size of the active token set and the maximum arc length, among other control param- eters. However, this framework does not cover arc-swift in its original form, as the authors limit each of their transitions to reduce at most one to- ken from the active token set (the buffer). On the other hand, the framework presented in <ref type="bibr">(GómezRodríguez and Nivre, 2013)</ref> does not explicitly make this constraint, and therefore generalizes to arc-swift. However, we note that arc-swift still falls out of the scope of existing discussions in that work, by introducing multiple Reduces in a single transition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper, we introduced arc-swift, a novel tran- sition system for dependency parsing. We also performed linguistic analyses on parser outputs and showed arc-swift parsers reduce errors in con- junction and adverbial attachments compared to parsers using traditional transition systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bernd Bohnet, Ryan McDonald, Emily Pitler, and</head><p>Ji Ma. 2016. Generalized transition-based depen- dency parsing via control parameters. In Proceed- ings of the 54th Annual Meeting of the Associa- tion for Computational Linguistics. volume 1, pages 150-160. https://www.aclweb.org/anthology/P16- 1015.</p><p>Samuel </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Model and Training Details</head><p>Our model setup is similar to that of (Kiperwasser and Goldberg, 2016) (See <ref type="figure" target="#fig_5">Figure 5)</ref>. We employ two blocks of bidirectional long short-term mem- ory (BiLSTM) networks (Hochreiter and Schmid- huber, 1997) that share very similar structures, one for part-of-speech (POS) tagging, the other for parsing. Both BiLSTMs have 400 hidden units in each direction, and the output of both are con- catenated and fed into a dense layer of rectified linear units (ReLU) before 32-dimensional rep- resentations are derived as classification features.</p><p>As the input to the tagger BiLSTM, we represent words with 100-dimensional word embeddings, initialized with GloVe vectors ( <ref type="bibr" target="#b10">Pennington et al., 2014</ref>). <ref type="bibr">8</ref> The output distribution of the tagger clas- sifier is used to compute a weighted sum of 32- dimensional POS embeddings, which is then con- catenated with the output of the tagger BiLSTM (800-dimensional per token) as the input to the parser BiLSTM. For the parser BiLSTM, we use two separate sets of dense layers to derive a "head" and a "dependent" representation for each token. These representations are later merged according to the parser state to make transition predictions. For traditional transition systems, we follow ( <ref type="bibr">Kiperwasser and Goldberg, 2016</ref>) by featurizing the top 3 tokens on the stack and the leftmost token in the buffer. To derive features for each token, we take its head representation v head and dependent representation v dep , and perform the following bi- affine combination</p><formula xml:id="formula_2">v feat,i = [f (v head , v dep )] i = ReLU v head W i v dep + b i v head + c i v dep + d i (1)</formula><p>where   to a fixed-dimensional softmax classifier for tran- sition decisions.</p><formula xml:id="formula_3">W i ∈ R 32×32 , b i , c</formula><p>For arc-swift, we featurize for each arc- inducing transition with the same composition function in Equation <ref type="formula">(1)</ref> with v head of the head to- ken and v dep of the dependent token of the arc to be induced. For Shift, we simply combine v head and v dep of the leftmost token in the buffer with the biaffine combination, and obtain its score by computing the inner-product of the feature and a vector. At each step, the scores of all feasible tran- sitions are normalized to a probability distribution by a softmax function.</p><p>In all of our experiments, the parsers are trained to maximize the log likelihood of the desired transition sequence, along with the tagger being trained to maximize the log likelihood of the cor- rect POS tag for each token.</p><p>To train the parsers, we use the ADAM opti- mizer ( <ref type="bibr">Kingma and Ba, 2014)</ref>, with β 2 = 0.9, an initial learning rate of 0.001, and minibatches of size 32 sentences. Parsers are trained for 10 passes through the dataset on PTB-SD. We also find that annealing the learning rate by a factor of 0.5 for every pass after the 5th helped improve per- formance. For EN-UD, we train for 30 passes, and anneal the learning rate for every 3 passes after the 15th due to the smaller size of the dataset. For all of the biaffine combination layers and dense layers, we dropout their units with a small prob- ability of 5%. Also during training time, we ran- domly replace 10% of the input words by an arti- ficial UNK token, which is then used to replace all unseen words in the development and test sets. Finally, we repeat each experiment with 3 inde- pendent random initializations, and use the aver- age result for reporting and statistical significance tests.</p><p>The code for the full specification of our models and aforementioned training details are avail- able at https://github.com/qipeng/ arc-swift.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Transitions defined by different transition systems.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Illustration of the model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 . We note</head><label>2</label><figDesc></figDesc><table>Model 

TS 
PTB-SD 
EN-UD 
UAS LAS UAS LAS 

This work 
asd 94.0 91.7 85.6 
81.5 
This work 
aeS 94.0 91.8 85.4 
81.4 
This work 
aeR 93.8 91.7 85.2 
81.2 
This work 
ah 
93.9 91.7 85.4 
81.3 
This work 
asw 94.3 92.2 86.1 
82.2 

Andor 2016 asd 94.6 92.8 84.8* 80.4* 
K&amp;G 2016 ah 
93.9 91.9 
Weiss 2015 asd 94.0 92.1 
C&amp;M 2014 asd 91.8 89.6 

Table 1: Performance of parsers using different 
transition systems on the Penn Treebank dataset. 
*: Obtained from their published results online. 6 

aeS 
asd 
ah 
aeR 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Common parser errors on PTB-SD. The 
top 4 common errors are categorized and shown 
in this table. Errors not shown are in a long-tail 
distribution and warrant analyses in future work. 

</table></figure>

			<note place="foot" n="1"> We only focus on projective parses for the scope of this paper.</note>

			<note place="foot" n="2"> A side-effect of arc-eager is that there is sometimes spurious ambiguity between Shift and Reduce transitions. For the example in Figure 1, the first Reduce can be inserted before the third Shift without changing the correctness of the resulting parse, i.e., both are feasible at that time. 3 For this example, we assume that the sentence is being parsed into Universal Dependencies.</note>

			<note place="foot" n="4"> This is easy to show because in arc-eager, all Reduce transitions can be viewed as preparing for a later LArc or RArc transition. We also note that similar to arc-eager transitions, arc-swift transitions must also satisfy certain pre-conditions. Specifically, an RArc[k] transition requires that the top k − 1 elements in the stack are already attached; LArc[k] additionally requires that the k-th element is unattached, resulting in no more than one feasible LArc candidate for any parser state.</note>

			<note place="foot" n="5"> In the interest of space, we abbreviate all transition systems (TS) as follows in tables: asw for arc-swift, asd for arcstandard, aeS/R for arc-eager-S/R, and ah for arc-hybrid.</note>

			<note place="foot" n="7"> We notice that for some examples the parsers predicted a ccomp (complement clause) attachment to verbs &quot;says&quot; and &quot;said&quot;, where the CoreNLP output simply labelled the relation as dep (unspecified). For other examples the relation between the prepositions in &quot;out of&quot; is labelled as prep (preposition) instead of pcomp (prepositional complement). We suspect this is due to the converter&apos;s inability to handle certain corner cases, but further study is warranted.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Timothy Dozat, Arun Chaganty, Danqi Chen, and the anonymous reviewers for helpful discussions. Stanford University gratefully ac-knowledges the support of the Defense Advanced Research Projects Agency (DARPA) Deep Ex-ploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract No. FA8750-13-2-0040. Any opinions, findings, and conclusion or recommendations ex-pressed in this material are those of the authors and do not necessarily reflect the view of the DARPA, AFRL, or the US government.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Globally normalized transition-based neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Andor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Alberti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aliaksei</forename><surname>Severyn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><surname>Presta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kuzman</forename><surname>Ganchev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Slav</forename><surname>Petrov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Collins</surname></persName>
		</author>
		<ptr target="https://www.aclweb.org/anthology/P16-1231" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics</title>
		<meeting>the 54th Annual Meeting of the Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Leveraging linguistic structure for open domain information extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gabor</forename><surname>Angeli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Melvin</forename><forename type="middle">Johnson</forename><surname>Premkumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher D</forename><surname>Manning</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/P15-1034" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics</title>
		<meeting>the 53rd Annual Meeting of the Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Experiments with a multilanguage non-projective dependency parser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Attardi</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/W06-2922" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth Conference on Computational Natural Language Learning. Association for Computational Linguistics</title>
		<meeting>the Tenth Conference on Computational Natural Language Learning. Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="166" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Dynamic programming algorithms for transition-based dependency parsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Kuhlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Gómez-Rodríguez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giorgio</forename><surname>Satta</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/P11-1068" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies</title>
		<meeting>the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="673" to="682" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The Stanford CoreNLP natural language processing toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihai</forename><surname>Surdeanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jenny</forename><surname>Finkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Bethard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Mcclosky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Association for Computational Linguistics (ACL) System Demonstrations</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Non-projective dependency parsing using spanning tree algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kiril</forename><surname>Ribarov</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/H05-1066" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the conference on Human Language Technology and Empirical Methods in Natural Language Processing</title>
		<meeting>the conference on Human Language Technology and Empirical Methods in Natural Language Processing</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="523" to="530" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Characterizing the errors of data-driven dependency parsing models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nivre</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/D07-1013" />
	</analytic>
	<monogr>
		<title level="m">EMNLP-CoNLL</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="122" to="131" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An efficient algorithm for projective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Workshop on Parsing Technologies</title>
		<meeting>the 8th International Workshop on Parsing Technologies</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="149" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Incrementality in deterministic dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<ptr target="https://www.aclweb.org/anthology/W04-0308" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together</title>
		<meeting>the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="50" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Universal dependencies v1: A multilingual treebank collection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marie-Catherine</forename><surname>De Marneffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filip</forename><surname>Ginter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Hajic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Christopher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Manning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Slav</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sampo</forename><surname>Petrov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Natalia</forename><surname>Pyysalo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Silveira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th International Conference on Language Resources and Evaluation (LREC 2016)</title>
		<meeting>the 10th International Conference on Language Resources and Evaluation (LREC 2016)</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1659" to="1666" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Glove: Global vectors for word representation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Pennington</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/D14-1162" />
	</analytic>
	<monogr>
		<title level="m">Empirical Methods in Natural Language Processing (EMNLP)</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1532" to="1543" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A transition-based dependency parser using a dynamic parsing strategy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Francesco</forename><surname>Sartorio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giorgio</forename><surname>Satta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<ptr target="http://www.aclweb.org/anthology/P13-1014" />
	</analytic>
	<monogr>
		<title level="m">Association for Computational Linguistics</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="135" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Open language learning for information extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Schmitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Bart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Soderland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oren</forename><surname>Etzioni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
