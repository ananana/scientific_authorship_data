<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T10:41+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Convolutional Encoder Model for Neural Machine Translation</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computational Linguistics</publisher>
				<availability status="unknown"><p>Copyright Association for Computational Linguistics</p>
				</availability>
				<date>July 30-August 4, 2017. July 30-August 4, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonas</forename><surname>Gehring</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Auli</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Grangier</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yann</forename><forename type="middle">N</forename><surname>Dauphin</surname></persName>
						</author>
						<title level="a" type="main">A Convolutional Encoder Model for Neural Machine Translation</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)</title>
						<meeting>the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers) <address><addrLine>Vancouver, Canada; Vancouver, Canada</addrLine></address>
						</meeting>
						<imprint>
							<publisher>Association for Computational Linguistics</publisher>
							<biblScope unit="page" from="123" to="135"/>
							<date type="published">July 30-August 4, 2017. July 30-August 4, 2017</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.18653/v1/p17-1012</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The prevalent approach to neural machine translation relies on bi-directional LSTMs to encode the source sentence. We present a faster and simpler architecture based on a succession of convolutional layers. This allows to encode the source sentence simultaneously compared to recurrent networks for which computation is constrained by temporal dependencies. On WMT&apos;16 English-Romanian translation we achieve competitive accuracy to the state-of-the-art and on WMT&apos;15 English-German we outper-form several recently published results. Our models obtain almost the same accuracy as a very deep LSTM setup on WMT&apos;14 English-French translation. We speed up CPU decoding by more than two times at the same or higher accuracy as a strong bi-directional LSTM. 1</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Neural machine translation (NMT) is an end-to-end approach to machine translation ( ). The most successful approach to date en- codes the source sentence with a bi-directional re- current neural network (RNN) into a variable length representation and then generates the translation left-to-right with another RNN where both com- ponents interface via a soft-attention mechanism ( <ref type="bibr" target="#b0">Bahdanau et al., 2015;</ref><ref type="bibr">Luong et al., 2015a;</ref><ref type="bibr">Bradbury and Socher, 2016;</ref><ref type="bibr">Sennrich et al., 2016a</ref>). Recurrent networks are typically parameterized as long short term memory networks (LSTM; Hochre- iter et al. 1997) or gated recurrent units (GRU; <ref type="bibr">Cho et al. 2014</ref>), often with residual or skip connec- tions ( <ref type="bibr" target="#b6">Wu et al., 2016;</ref><ref type="bibr" target="#b8">Zhou et al., 2016</ref>) to enable stacking of several layers ( §2).</p><p>There have been several attempts to use convo- lutional encoder models for neural machine trans-lation in the past but they were either only ap- plied to rescoring n-best lists of classical systems <ref type="bibr">(Kalchbrenner and Blunsom, 2013)</ref> or were not competitive to recurrent alternatives ( <ref type="bibr">Cho et al., 2014a</ref>). This is despite several attractive properties of convolutional networks. For example, convolu- tional networks operate over a fixed-size window of the input sequence which enables the simultaneous computation of all features for a source sentence. This contrasts to RNNs which maintain a hidden state of the entire past that prevents parallel com- putation within a sequence.</p><p>A succession of convolutional layers provides a shorter path to capture relationships between ele- ments of a sequence compared to RNNs. <ref type="bibr">2</ref> This also eases learning because the resulting tree-structure applies a fixed number of non-linearities compared to a recurrent neural network for which the number of non-linearities vary depending on the time-step. Because processing is bottom-up, all words un- dergo the same number of transformations, whereas for RNNs the first word is over-processed and the last word is transformed only once.</p><p>In this paper we show that an architecture based on convolutional layers is very competitive to recur- rent encoders. We investigate simple average pool- ing as well as parameterized convolutions as an al- ternative to recurrent encoders and enable very deep convolutional encoders by using residual connec- tions ( <ref type="bibr">He et al., 2015;</ref><ref type="bibr">§3)</ref>.</p><p>We experiment on several standard datasets and compare our approach to variants of recurrent en- coders such as uni-directional and bi-directional LSTMs. On WMT'16 English-Romanian transla- tion we achieve accuracy that is very competitive to the current state-of-the-art result. We perform competitively on WMT'15 English-German, and nearly match the performance of the best WMT'14 English-French system based on a deep LSTM setup when comparing on a commonly used subset of the training data ( <ref type="bibr" target="#b8">Zhou et al. 2016</ref>; §4, §5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Recurrent Neural Machine Translation</head><p>The general architecture of the models in this work follows the encoder-decoder approach with soft at- tention first introduced in ( <ref type="bibr" target="#b0">Bahdanau et al., 2015)</ref>. A source sentence x = (x 1 , . . . , x m ) of m words is processed by an encoder which outputs a sequence of states z = (z 1 . . . . , z m ).</p><p>The decoder is an RNN network that computes a new hidden state s i+1 based on the previous state s i , an embedding g i of the previous target lan- guage word y i , as well as a conditional input c i de- rived from the encoder output z. We use LSTMs <ref type="bibr">(Hochreiter and Schmidhuber, 1997</ref>) for all decoder networks whose state s i comprises of a cell vector and a hidden vector h i which is output by the LSTM at each time step. We input c i into the LSTM by concatenating it to g i .</p><p>The translation model computes a distribution over the V possible target words y i+1 by trans- forming the LSTM output h i via a linear layer with weights W o and bias b o :</p><formula xml:id="formula_0">p(y i+1 |y 1 , . . . , y i , x) = softmax(W o h i+1 + b o )</formula><p>The conditional input c i at time i is computed via a simple dot-product style attention mecha- nism ( <ref type="bibr">Luong et al., 2015a</ref>). Specifically, we trans- form the decoder hidden state h i by a linear layer with weights W d and b d to match the size of the embedding of the previous target word g i and then sum the two representations to yield d i . Condi- tional input c i is a weighted sum of attention scores a i ∈ R m and encoder outputs z. The attention scores a i are determined by a dot product between h i with each z j , followed by a softmax over the source sequence:</p><formula xml:id="formula_1">d i = W d h i + b d + g i , a ij = exp d T i z j m t=1 exp d T i z t , c i = m j=1 a ij z j</formula><p>In preliminary experiments, we did not find the MLP attention of ( <ref type="bibr" target="#b0">Bahdanau et al., 2015</ref>) to perform significantly better in terms of BLEU nor perplex- ity. However, we found the dot-product attention to be more favorable in terms of training and evalua- tion speed. We use bi-directional LSTMs to implement re- current encoders similar to ( <ref type="bibr" target="#b8">Zhou et al., 2016)</ref> which achieved some of the best WMT14 English- French results reported to date. First, each word of the input sequence x is embedded in distribu- tional space resulting in e = (e 1 , . . . , e m ). The em- beddings are input to two stacks of uni-directional RNNs where the output of each layer is reversed before being fed into the next layer. The first stack takes the original sequence while the second takes the reversed input sequence; the output of the sec- ond stack is reversed so that the final outputs of the stacks align. Finally, the top-level hidden states of the two stacks are concatenated and fed into a linear layer to yield z. We denote this encoder architecture as BiLSTM.</p><p>3 Non-recurrent Encoders</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Pooling Encoder</head><p>A simple baseline for non-recurrent encoders is the pooling model described in <ref type="bibr">(Ranzato et al., 2015)</ref> which simply averages the embeddings of k con- secutive words. Averaging word embeddings does not convey positional information besides that the words in the input are somewhat close to each other. As a remedy, we add position embeddings to encode the absolute position of each source word within a sentence. Each source embedding e j therefore contains a position embedding l j as well as the word embedding w j . Position embed- dings have also been found helpful in memory net- works for question-answering and language model- ing ( <ref type="bibr" target="#b3">Sukhbaatar et al., 2015)</ref>. Similar to the recur- rent encoder ( §2), the attention scores a ij are com- puted from the pooled representations z j , however, the conditional input c i is a weighted sum of the embeddings e j , not z j , i.e.,</p><formula xml:id="formula_2">e j = w j + l j , z j = 1 k k/2 t=−−k/2 e j+t , c i = m j=1 a ij e j</formula><p>The input sequence is padded prior to pooling such that the encoder output matches the input length |z| = |x|. We set k to 5 in all experiments as (Ran- zato et al., 2015).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Convolutional Encoder</head><p>A straightforward extension of pooling is to learn the kernel in a convolutional neural network (CNN). The encoder output z j contains information about a fixed-sized context depending on the kernel width k but the desired context width may vary. This canbe addressed by stacking several layers of convolu- tions followed by non-linearities: additional layers increase the total context size while non-linearities can modulate the effective size of the context as needed. For instance, stacking 5 convolutions with kernel width k = 3 results in an input field of 11 words, i.e., each output depends on 11 input words, and the non-linearities allow the encoder to exploit the full input field, or to concentrate on fewer words as needed.</p><p>To ease learning for deep encoders, we add resid- ual connections from the input of each convolution to the output and then apply the non-linear activa- tion function to the output (tanh; <ref type="bibr">He et al., 2015)</ref>; the non-linearities are therefore not 'bypassed'. Multi-layer CNNs are constructed by stacking sev- eral blocks on top of each other. The CNNs do not contain pooling layers which are commonly used for down-sampling, i.e., the full source sequence length will be retained after the network has been applied. Similar to the pooling model, the convolu- tional encoder uses position embeddings.</p><p>The final encoder consists of two stacked convo- lutional networks <ref type="figure" target="#fig_0">(Figure 1</ref>): CNN-a produces the encoder output z j to compute the attention scores a i , while the conditional input c i to the decoder is computed by summing the outputs of CNN-c,</p><formula xml:id="formula_3">z j = CNN-a(e) j , c i = m j=1 a ij CNN-c(e) j .</formula><p>In practice, we found that two different CNNs re- sulted in better perplexity as well as BLEU com- pared to using a single one ( §5.3). We also found this to perform better than directly summing the e i without transformation as for the pooling model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Related Work</head><p>There are several past attempts to use convolutional encoders for neural machine translation, however, to our knowledge none of them were able to match the performance of recurrent encoders. <ref type="bibr">(Kalchbrenner and Blunsom, 2013</ref>) introduce a convolu- tional sentence encoder in which a multi-layer CNN generates a fixed sized embedding for a source sentence, or an n-gram representation followed by transposed convolutions for directly generating a per-token decoder input. The latter requires the length of the translation prior to generation and both models were evaluated by rescoring the output of an existing translation system. ( <ref type="bibr">Cho et al., 2014a</ref>) propose a gated recursive CNN which is repeat- edly applied until a fixed-size representation is ob- tained but the recurrent encoder achieves higher ac- curacy. In follow-up work, the authors improved the model via a soft-attention mechanism but did not re- consider convolutional encoder models ( <ref type="bibr" target="#b0">Bahdanau et al., 2015)</ref>.</p><p>Concurrently to our work, ( <ref type="bibr">Kalchbrenner et al., 2016</ref>) have introduced convolutional translation models without an explicit attention mechanism but their approach does not yet result in state-of- the-art accuracy. ( <ref type="bibr">Lamb and Xie, 2016</ref>) also pro- posed a multi-layer CNN to generate a fixed-size encoder representation but their work lacks quan- titative evaluation in terms of BLEU. <ref type="bibr">Meng et al. (2015)</ref> and ( <ref type="bibr" target="#b5">Tu et al., 2015</ref>) applied convolutional models to score phrase-pairs of traditional phrase- based and dependency-based translation models. Convolutional architectures have also been success- ful in language modeling but so far failed to outper- form LSTMs ( <ref type="bibr">Pham et al., 2016</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experimental Setup</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Datasets</head><p>We evaluate different encoders and ablate architec- tural choices on a small dataset from the German- English machine translation track of IWSLT 2014 ( <ref type="bibr">Cettolo et al., 2014</ref>) with a similar setting to ( <ref type="bibr">Ranzato et al., 2015)</ref>. Unless otherwise stated, we restrict training sentences to have no more than 175 words; test sentences are not filtered. This is a higher threshold compared to other publications but ensures proper training of the position embed- dings for non-recurrent encoders; the length thresh- old did not significantly effect recurrent encoders. Length filtering results in 167K sentence pairs and we test on the concatenation of tst2010, tst2011, tst2012, tst2013 and dev2010 comprising 6948 sen- tence pairs. 3 Our final results are on three major WMT tasks: WMT'16 English-Romanian. We use the same data and pre-processing as (Sennrich et al., 2016a) and train on 2.8M sentence pairs. <ref type="bibr">4</ref> Our model is word-based instead of relying on byte-pair encod- ing ( <ref type="bibr" target="#b1">Sennrich et al., 2016b</ref>  mon Crawl and News Commentary v10 and ap- ply the standard Moses tokenization to obtain 3.9M sentence pairs ( <ref type="bibr">Koehn et al., 2007)</ref>. We report re- sults on newstest2015. WMT'14 English-French. We use a commonly used subset of 12M sentence pairs <ref type="bibr">(Schwenk, 2014)</ref>, and remove sentences longer than 150 words. This results in 10.7M sentence-pairs for training. Results are reported on ntst14.</p><p>A small subset of the training data serves as vali- dation set (5% for IWSLT'14 and 1% for WMT) for early stopping and learning rate annealing ( §4.3). For IWSLT'14, we replace words that occur fewer than 3 times with a &lt;unk&gt; symbol, which results in a vocabulary of 24158 English and 35882 German word types. For WMT datasets, we retain 200K source and 80K target words. For English-French only, we set the target vocabulary to 30K types to be comparable with previous work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Model parameters</head><p>We use 512 hidden units for both recurrent encoders and decoders. We reset the decoder hidden states to zero between sentences. For the convolutional en- coder, 512 hidden units are used for each layer in CNN-a, while layers in CNN-c contain 256 units each. All embeddings, including the output pro- duced by the decoder before the final linear layer, are of 256 dimensions. On the WMT corpora, we find that we can improve the performance of the bi- directional LSTM models (BiLSTM) by using 512- dimensional word embeddings.</p><p>Model weights are initialized from a uniform distribution within [−0.05, 0.05]. For convolu- tional layers, we use a uniform distribution of −kd −0.5 , kd −0. <ref type="bibr">5</ref> , where k is the kernel width (we use 3 throughout this work) and d is the input size for the first layer and the number of hidden units for subsequent layers <ref type="bibr">(Collobert et al., 2011b</ref>). For CNN-c, we transform the input and output with a linear layer each to match the smaller embed- ding size. The model parameters were tuned on IWSLT'14 and cross-validated on the larger WMT corpora.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Optimization</head><p>Recurrent models are trained with Adam as we found them to benefit from aggressive optimization. We use a step width of 3.125 · 10 −4 and early stop- ping based on validation perplexity <ref type="bibr">(Kingma and Ba, 2014</ref>). For non-recurrent encoders, we obtain best results with stochastic gradient descent (SGD) and annealing: we use a learning rate of 0.1 and once the validation perplexity stops improving, we reduce the learning rate by an order of magnitude each epoch until it falls below 10 −4 .</p><p>For all models, we use mini-batches of 32 sen- tences for IWSLT'14 and 64 for WMT. We use truncated back-propagation through time to limit the length of target sequences per mini-batch to 25 words. Gradients are normalized by the mini-batch size. We re-normalize the gradients if their norm exceeds 25 ( <ref type="bibr">Pascanu et al., 2013</ref>). Gradients of con- volutional layers are scaled by sqrt(dim(input)) −1 similar to ( <ref type="bibr">Collobert et al., 2011b</ref>). We use dropout on the embeddings and decoder outputs h i with a rate of 0.2 for IWSLT'14 and 0.1 for WMT <ref type="bibr" target="#b2">(Srivastava et al., 2014</ref>). All models are implemented in Torch ( <ref type="bibr">Collobert et al., 2011a</ref>) and trained on a single GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Evaluation</head><p>We report accuracy of single systems by train- ing several identical models with different ran- <ref type="bibr">5</ref> The word penalty adds a constant factor to log-likelihoods, except for the end-of-sentence token.</p><note type="other">dom seeds (5 for IWSLT'14, 3 for WMT) and pick the one with the best validation perplex- ity for final BLEU evaluation. Translations are generated by a beam search and we normalize log-likelihood scores by sentence length. On IWSLT'14 we use a beam width of 10 and for WMT models we tune beam width and word penalty on a separate test set, that is newsdev2016 for WMT'16 English-Romanian, newstest2014 for WMT'15 English-German and ntst1213 for WMT'14 English-French.</note><p>Prior to scoring the generated translations against the respective references, we perform unknown word replacement based on attention scores ( <ref type="bibr">Jean et al., 2015)</ref>. Unknown words are replaced by look- ing up the source word with the maximum atten- tion score in a pre-computed dictionary. If the dictionary contains no translation, then we simply copy the source word. Dictionaries were extracted from the aligned training data that was aligned with fast align <ref type="bibr">(Dyer et al., 2013)</ref>. Each source word is mapped to the target word it is most fre- quently aligned to.</p><p>For convolutional encoders with stacked CNN-c layers we noticed for some models that the atten- tion maxima were consistently shifted by one word. We determine this per-model offset on the above- mentioned development sets and correct for it. Fi- nally, we compute case-sensitive tokenized BLEU, except for WMT'16 English-Romanian where we use detokenized BLEU to be comparable with Sen- nrich et al. (2016a). <ref type="bibr">6</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Recurrent vs. Non-recurrent Encoders</head><p>We first compare recurrent and non-recurrent en- coders in terms of perplexity and BLEU on IWSLT'14 with and without position embeddings ( §3.1) and include a phrase-based system ( <ref type="bibr">Koehn et al., 2007)</ref>. <ref type="table">Table 1</ref> shows that a single-layer con- volutional model with position embeddings (Con- volutional) can outperform both a uni-directional LSTM encoder (LSTM) as well as a bi-directional LSTM encoder (BiLSTM). Next, we increase the depth of the convolutional encoder. We choose a <ref type="bibr">5</ref> Specifically, we select a beam from {5, 10} and a word penalty from {0, −0.5, −1, −1.5} Among recurrent encoders, the BiLSTM is 2.3 BLEU better than the uni-directional version. The simple pooling encoder which does not contain any parameters is only 1.3 BLEU lower than a uni- directional LSTM encoder and 3.6 BLEU lower than BiLSTM. The results without position em- beddings (words) show that position information is crucial for convolutional encoders. In particu- lar for shallow models (Pooling and Convolutional), whereas deeper models are less effected. Recurrent encoders do not benefit from explicit position in- formation because this information can be naturally extracted through the sequential computation.</p><p>When tuning model settings, we generally ob- serve good correlation between perplexity and BLEU. However, for convolutional encoders per- plexity gains translate to smaller BLEU improve- ments compared to recurrent counterparts <ref type="table">(Table 1)</ref>. We observe a similar trend on larger datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Evaluation on WMT Corpora</head><p>Next, we evaluate the BiLSTM encoder and the convolutional encoder architecture on three larger tasks and compare against previously published re- sults. On WMT'16 English-Romanian translation we compare to ( <ref type="bibr">Sennrich et al., 2016a</ref>), the win- ning single system entry for this language pair. Their model consists of a bi-directional GRU en- coder, a GRU decoder and MLP-based attention.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>WMT'16 English-Romanian</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Encoder</head><p>Vocabulary BLEU  They use byte pair encoding (BPE) to achieve open- vocabulary translation and dropout in all compo- nents of the neural network to achieve 28.1 BLEU; we use the same pre-processing but no BPE ( §4). The results <ref type="table" target="#tab_3">(Table 2)</ref> show that a deep convo- lutional encoder can perform competitively to the state of the art on this dataset ( <ref type="bibr">Sennrich et al., 2016a</ref>). Our bi-directional LSTM encoder baseline is 0.6 BLEU lower than the state of the art but uses only 512 hidden units compared to 1024. A single- layer convolutional encoder with embedding size 256 performs at 27.1 BLEU. Increasing the num- ber of convolutional layers to 8 in CNN-a and 4 in CNN-c achieves 27.8 BLEU which outperforms our baseline and is competitive to the state of the art.</p><p>On WMT'15 English to German, we compare to a BiLSTM baseline and prior work: (Jean et al., 2015) introduce a large output vocabulary; the decoder of ( <ref type="bibr">Chung et al., 2016</ref>) operates on the character-level; <ref type="bibr" target="#b7">(Yang et al., 2016</ref>) uses LSTMs in- stead of GRUs and feeds the conditional input to the output layer as well as to the decoder.</p><p>Our single-layer BiLSTM baseline is competi- tive to prior work and a two-layer BiLSTM encoder performs 0.6 BLEU better at 24.1 BLEU. Previ- ous work also used multi-layer setups, e.g., <ref type="bibr">(Chung et al., 2016</ref>) has two layers both in the encoder and the decoder with 1024 hidden units, and <ref type="bibr" target="#b7">(Yang et al., 2016</ref>) use 1000 hidden units per LSTM. We use 512 hidden units for both LSTM and convolu- tional encoders. Our convolutional model with ei- ther 8 or 15 layers in CNN-a outperform the BiL- STM encoder with both a single decoder layer or two decoder layers.</p><p>Finally, we evaluate on the larger WMT'14 English-French corpus. On this dataset the recur- rent architectures benefit from an additional layer both in the encoder and the decoder. For a single- layer decoder, a deep convolutional encoder outper- forms the BiLSTM accuracy by 0.3 BLEU and for a two-layer decoder, our very deep convolutional en- coder with up to 20 layers outperforms the BiLSTM by 0.4 BLEU. It has 40% fewer parameters than the BiLSTM due to the smaller embedding sizes. We also outperform several previous systems, includ- ing the very deep encoder-decoder model proposed by <ref type="bibr">(Luong et al., 2015a)</ref>. Our best result is just 0.2 BLEU below ( <ref type="bibr" target="#b8">Zhou et al., 2016</ref>) who use a very deep LSTM setup with a 9-layer encoder, a 7-layer decoder, shortcut connections and extensive regu- larization with dropout and L2 regularization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Convolutional Encoder Architecture Details</head><p>We next motivate our design of the convolutional encoder ( §3.2). We use the smaller IWSLT'14 German-English setup without unknown word re- placement to enable fast experimental turn-around. BLEU results are averaged over three training runs initialized with different seeds. <ref type="figure" target="#fig_1">Figure 2</ref> shows accuracy for a different number of layers of both CNNs with and without residual connections. Our first observation is that computing the conditional input c i directly over embeddings e (line "without CNN-c") is already working well at 28.3 BLEU with a single CNN-a layer and at 29.1 BLEU for CNN-a with 7 layers <ref type="figure" target="#fig_1">(Figure 2a)</ref>. In- creasing the number of CNN-c layers is beneficial up to three layers and beyond this we did not ob- serve further improvements. Similarly, increasing the number of layers in CNN-a beyond six does not increase accuracy on this relatively small dataset. In general, choosing two to three times as many layers in CNN-a as in CNN-c is a good rule of thumb. Without residual connections, the model fails to utilize the increase in modeling power from addi- tional layers, and performance drops significantly for deeper encoders <ref type="figure" target="#fig_1">(Figure 2b)</ref>.</p><p>Our convolutional architecture relies on two sets of networks, CNN-a for attention score computa- tion a i and CNN-c for the conditional input c i to be fed to the decoder. We found that using the same network for both tasks, similar to recurrent encoders, resulted in poor accuracy of 22.9 BLEU. This compares to 28.5 BLEU for separate single- layer networks, or 28.3 BLEU when aggregating embeddings for c i . Increasing the number of layers in the single network setup did not help. <ref type="figure" target="#fig_1">Figure 2(a)</ref> suggests that the attention weights (CNN-a) need to integrate information from a wide context which can be done with a deep stack. At the same time, the vectors which are averaged (CNN-c) seem to benefit from a shallower, more local representation closer to the input words. Two stacks are an easy way to achieve these contradicting requirements.</p><p>In Appendix A we visualize attention scores and find that alignments for CNN encoders are less sharp compared to BiLSTMs, however, this does not affect the effectiveness of unknown word re- placement once we adjust for shifted maxima. In Appendix B we investigate whether deep convo- lutional encoders are required for translating long sentences and observe that even relatively shallow encoders perform well on long sentences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Training and Generation Speed</head><p>For training, we use the fast CuDNN LSTM im- plementation for layers without attention and ex- periment on IWSLT'14 with batch size 32. The single-layer BiLSTM model trains at 4300 target words/second, while the 6/3 deep convolutional en- coder compares at 6400 words/second on an NVidia Tesla M40 GPU. We do not observe shorter over- all training time since SGD converges slower than Adam which we use for BiLSTM models.</p><p>We measure generation speed on an Intel Haswell CPU clocked at 2.50GHz with a single thread for BLAS operations. We use vocabulary selection which can speed up generation by up to a factor of ten at no cost in accuracy via making the time to compute the final output layer negligible ( <ref type="bibr">Mi et al., 2016;</ref><ref type="bibr">L'Hostis et al., 2016)</ref>. This shifts the focus from the efficiency of the encoder to the efficiency of the decoder. On IWSLT'14 <ref type="table" target="#tab_5">(Table 3a</ref>) the convo- lutional encoder increases the speed of the overall model by a factor of 1.35 compared to the BiLSTM encoder while improving accuracy by 0.7 BLEU. In this setup both encoders models have the same hid- den layer and embedding sizes.</p><p>On the larger WMT'15 English-German task <ref type="table" target="#tab_5">(Table 3b</ref>) the convolutional encoder speeds up gen- eration by 2.1 times compared to a two-layer BiL- STM. This corresponds to 231 source words/second with beam size 5. Our best model on this dataset generates 203 words/second but at slightly lower accuracy compared to the full vocabulary setting in <ref type="table" target="#tab_3">Table 2</ref>. The recurrent encoder uses larger embed- dings than the convolutional encoder which were required for the models to match in accuracy.</p><p>The smaller embedding size is not the only rea- son for the speed-up. In <ref type="table" target="#tab_5">Table 3a</ref> (a), we com- pare a Conv 6/3 encoder and a BiLSTM with equal embedding sizes. The convolutional encoder is still 1.34x faster (at 0.7 higher BLEU) although it requires roughly 1.6x as many FLOPs. We be- lieve that this is likely due to better cache locality for convolutional layers on CPUs: an LSTM with fused gates 7 requires two big matrix multiplications with different weights as well as additions, multi- plications and non-linearities for each source word, while the output of each convolutional layer can be computed as whole with a single matrix multiply.</p><p>For comparison, the quantized deep LSTM-   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We introduced a simple encoder model for neu- ral machine translation based on convolutional net- works. This approach is more parallelizable than recurrent networks and provides a shorter path to capture long-range dependencies in the source. We find it essential to use source position embeddings as well as different CNNs for attention score com- putation and conditional input aggregation. Our experiments show that convolutional en- coders perform on par or better than baselines based on bi-directional LSTM encoders. In comparison to other recent work, our deep convolutional en- coder is competitive to the best published results to date (WMT'16 English-Romanian) which are obtained with significantly more complex models (WMT'14 English-French) or stem from improve- ments that are orthogonal to our work (WMT'15 English-German). Our architecture also leads to large generation speed improvements: translation models with our convolutional encoder can translate twice as fast as strong baselines with bi-directional recurrent encoders.</p><p>Future work includes better training to enable faster convergence with the convolutional encoder to better leverage the higher processing speed. Our fast architecture is interesting for character level en- coders where the input is significantly longer than for words. Also, we plan to investigate the effec- tiveness of our architecture on other sequence-to- sequence tasks, e.g. summarization, constituency parsing, dialog modeling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Alignment Visualization</head><p>In <ref type="figure">Figure 4</ref> and <ref type="figure">Figure 5</ref>, we plot attention scores for a sample WMT'15 English-German and WMT'14 English-French translation with BiLSTM and deep convolutional encoders. The translation is on the x-axis and the source sentence on the y-axis.</p><p>The attention scores of the BiLSTM output are sharp but do not necessarily represent a correct alignment. For CNN encoders the scores are less focused but still indicate an approximate source lo- cation, e.g., in <ref type="figure">Figure 4b</ref>, when moving the clause "over 1,000 people were taken hostage" to the back of the translation. For some models, attention max- ima are consistently shifted by one token as both in <ref type="figure">Figure 4b</ref> and <ref type="figure">Figure 5b</ref>.</p><p>Interestingly, convolutional encoders tend to fo- cus on the last token <ref type="figure">(Figure 4b</ref>) or both the first and last tokens <ref type="figure">(Figure 5b)</ref>. Motivated by the hypothe- sis that the this may be due to the decoder depend- ing on the length of the source sentence (which it cannot determine without position embeddings), we explicitly provided a distributed representation of the input length to the decoder and attention mod- ule. However, this did not cause a change in atten- tion patterns nor did it improve translation accuracy. One characteristic of our convolutional encoder architecture is that the context over which outputs are computed depends on the number of layers. With bi-directional RNNs, every encoder output de- pends on the entire source sentence. In <ref type="figure" target="#fig_2">Figure 3</ref>, we evaluate whether limited context affects the translation quality on longer sentences of WMT'15 English-German which often requires moving verbs over long distances. We sort the newstest2015 test set by source length, partition it into 15 equally- sized buckets, and compare the BLEU scores of models listed in <ref type="table" target="#tab_3">Table 2</ref> on a per-bucket basis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Performance by Sentence Length</head><p>There is no clear evidence for sub-par transla- tions on sentences that are longer than the observ- able context per encoder output. We include a small encoder with a 6-layer CNN-c and a 3-layer CNN-a in the comparison which performs worse than a 2- layer BiLSTM (23.3 BLEU vs. 24.1). With 6 con- volutional layers at kernel width 3, each encoder output contains information of 13 adjacent source words. Looking at the accuracy for sentences with 15 words or more, this relatively shallow CNN is either on par or better than the BiLSTM for 5 out of 10 buckets; the BiLSTM has access to the entire source context. Similar observations can be made for the deeper convolutional encoders.</p><p>[</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Neural machine translation model with single-layer convolutional encoder networks. CNN-a is on the left and CNN-c is at the right. Embedding layers are not shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Effect of encoder depth on IWSLT'14 with and without residual connections. The x-axis varies the number of layers in CNN-a and curves show different CNN-c settings.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: BLEU per sentence length on WMT'15 English-German newstest2015. The test set is partitioned into 15 equally-sized buckets according to source sentence length.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc>Accuracy on three WMT tasks, including results published in previous work. For deep convolu- tional encoders, we include the number of layers in CNN-a and CNN-c, respectively.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Generation speed in source words per second on a single CPU core using vocabulary selection. 

based model in (Wu et al., 2016) processes 106.4 
words/second for English-French on a CPU with 
88 cores and 358.8 words/second on a custom TPU 
chip. The optimized RNNsearch model and C++ 
decoder described by (Junczys-Dowmunt et al., 
2016) translates 265.3 words/s on a CPU with a 
similar vocabulary selection technique, computing 
16 sentences in parallel, i.e., 16.6 words/s on a sin-
gle core. 

</table></figure>

			<note place="foot" n="1"> The source code will be availabe at https://github. com/facebookresearch/fairseq</note>

			<note place="foot" n="2"> For kernel width k and sequence length n we require max 1, n−1 k−1 forwards on a succession of stacked convolutional layers compared to n forwards with an RNN.</note>

			<note place="foot" n="3"> Different to the other datasets, we lowercase the training data and evaluate with case-insensitive BLEU. 4 We followed the pre-processing of https: //github.com/rsennrich/wmt16-scripts/ blob/master/sample/preprocess.sh and added the back-translated data from http://data.statmt.org/ rsennrich/wmt16_backtranslations/en-ro.</note>

			<note place="foot">Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016a. Edinburgh neural machine translation systems for wmt 16.</note>
		</body>
		<back>
			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Neural machine translation by jointly learning to align and translate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dzmitry</forename><surname>Bahdanau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyunghyun</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ICLR</title>
		<meeting>of ICLR</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Neural Machine Translation of Rare Words with Subword Units</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rico</forename><surname>Sennrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barry</forename><surname>Haddow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandra</forename><surname>Birch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dropout: a simple way to prevent Neural Networks from overfitting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitish</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JMLR</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">End-to-end Memory Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sainbayar</forename><surname>Sukhbaatar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Fergus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arthur</forename><surname>Szlam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NIPS</title>
		<meeting>of NIPS</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="2440" to="2448" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Sequence to Sequence Learning with Neural Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Quoc V</forename><surname>Le</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NIPS</title>
		<meeting>of NIPS</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="3104" to="3112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Context-dependent Translation selection using Convolutional Neural Network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhaopeng</forename><surname>Tu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baotian</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhengdong</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hang</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACLIJCNLP</title>
		<meeting>of ACLIJCNLP</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yonghui</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhifeng</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Quoc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maxim</forename><surname>Macherey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Krikun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qin</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Macherey</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1609.08144</idno>
		<title level="m">Google&apos;s Neural Machine Translation System: Bridging the Gap between Human and Machine Translation</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zichao</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiting</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuntian</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Dyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Smola</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1607.05108</idno>
		<title level="m">Neural Machine Translation with Recurrent Attention Modeling</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jie</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ying</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuguang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Xu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.04199</idno>
		<title level="m">Deep Recurrent Models with Fast-Forward Connections for Neural Machine Translation</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Deep convolutional encoder with 15-layer CNN-a and 5-layer CNN-c</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Attention scores for WMT&apos;15 English-German translation for a sentence of newstest2015</title>
	</analytic>
	<monogr>
		<title level="j">Figure</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Deep convolutional encoder with 20-layer CNN-a and 5-layer CNN-c</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Attention scores for WMT&apos;14 English-French translation for a sentence of ntst14</title>
	</analytic>
	<monogr>
		<title level="j">Figure</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
