<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/ana/installs/grobid/grobid-0.5.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2019-04-18T12:30+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Empty element recovery by spinal parser operations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 7-12, 2016</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katsuhiko</forename><surname>Hayashi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">NTT Communication Science Laboratories</orgName>
								<orgName type="institution" key="instit2">NTT Corporation</orgName>
								<address>
									<addrLine>2-4 Hikaridai, Seika-cho, Soraku-gun</addrLine>
									<postCode>619-0237</postCode>
									<settlement>Kyoto</settlement>
									<country key="JP">Japan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Masaaki</forename><surname>Nagata</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">NTT Communication Science Laboratories</orgName>
								<orgName type="institution" key="instit2">NTT Corporation</orgName>
								<address>
									<addrLine>2-4 Hikaridai, Seika-cho, Soraku-gun</addrLine>
									<postCode>619-0237</postCode>
									<settlement>Kyoto</settlement>
									<country key="JP">Japan</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Empty element recovery by spinal parser operations</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics</title>
						<meeting>the 54th Annual Meeting of the Association for Computational Linguistics <address><addrLine>Berlin, Germany</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page" from="95" to="100"/>
							<date type="published">August 7-12, 2016</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper presents a spinal parsing algorithm that can jointly detect empty elements. This method achieves state-of-the-art performance on English and Japanese empty element recovery problems.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Empty categories, which are used in Penn Tree- bank style annotations to represent complex syn- tactic phenomena like constituent movement and discontinuous constituents, provide important in- formation for understanding the semantic structure of sentences. Previous studies attempt empty ele- ment recovery by casting it as linear tagging <ref type="bibr" target="#b6">(Dienes and Dubey, 2003)</ref>, PCFG parsing <ref type="bibr" target="#b12">(Schmid, 2006;</ref><ref type="bibr" target="#b2">Cai et al., 2011</ref>) or post-processing of syn- tactic parsing <ref type="bibr" target="#b11">(Johnson, 2002;</ref><ref type="bibr" target="#b7">Gabbard et al., 2006</ref>). To the best of our knowledge, the results reported by <ref type="bibr" target="#b2">(Cai et al., 2011</ref>) are the best yet re- ported, so we pursue a method that uses syntactic parsing to jointly solve the empty element recov- ery problem.</p><p>Our proposal uses the spinal Tree Adjoining Grammar (TAG) formalism of ( <ref type="bibr" target="#b3">Carreras et al., 2008</ref>). The spinal TAG has a set of elementary trees, called spines, each consisting of a lexical anchor with a series of unary projections. Fig- ure 1 displays (a) a head-annotated constituent tree and (b) spines extracted from the tree. This pa- per presents a transition-based algorithm together with several operations to combine spines for con- structing full parse trees with empty elements. Compared with the PCFG parsing approaches, one advantage of our method is its flexible feature representations, which allow the incorporation of constituency-, dependency-and spine-based fea- tures. Of particular interest, the motivation for our spinal TAG-based approach comes from the . . (a) .</p><p>.  intuition that features extracted from spines can be expected to be useful for empty element recov- ery in the same way as constituency-based vertical higher-order conjunctive features are used in re- cent post-processing methods ( <ref type="bibr" target="#b15">Xiang et al., 2013;</ref><ref type="bibr" target="#b14">Takeno et al., 2015)</ref>. Experiments on English and Japanese datasets empirically show that our sys- tem outperforms existing alternatives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Spinal Tree Adjoining Grammars</head><p>We define here the spinal TAG G = (N, PT, T, LS) where N is a set of nonterminal symbols, PT is a set of pre-terminal symbols (or part-of-speech tags), T is a set of terminal symbols (or words), and LS is a set of lexical spines. Each spine, s, has the form n 0 → n 1 → · · · → n k−1 → n k (k ∈ N) which satisfies the conditions:</p><p>• n 0 ∈ T and n 1 ∈ PT ,</p><formula xml:id="formula_0">• ∀i ∈ [2, k], n i ∈ N.</formula><p>The height of spine s is ht(s) = k + 1 and for some position i ∈ <ref type="bibr">[0, k]</ref>, the label at i is s(i) = n i . Tak-</p><formula xml:id="formula_1">. . (a) . . . DT . . . . . any . . . NP @2</formula><p>. . .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. . NN @1</head><p>. . .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. . way</head><p>.</p><p>⇒ .</p><p>. . NP <ref type="bibr">@2</ref> . . . . .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. . NN @1</head><p>. . .</p><p>. . way .</p><p>. .   We use @# to illustrate node position on a spine, explicitly. After a regular adjunction, the result- ing tree has an additional node level which has a copy of its original node at position @x, while a sister adjunction simply inserts a spine into some node of another spine. If adjunction left (or right) inserts spine s 1 into some node at @x on spine s 2 , we call s 2 the head spine of s 1 and s 1 the left (or right) child spine of s 2 1 . This paper denotes sister adjunction left and right as</p><formula xml:id="formula_2">s 1 ▷ ⃝ x s 2 , s 2 ◁ ⃝ x s 1 , reg- ular adjunction left and right as s 1 ▶ ⃝ x s 2 , s 2 ◀ ⃝ x s 1 , respectively.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Arc-Standard Shift-Reduce Spinal TAG Parsing</head><p>There are three algorithms for spinal TAG parsing, (1) Eisner-Satta CKY ( <ref type="bibr" target="#b3">Carreras et al., 2008)</ref>, <ref type="formula">(2)</ref> arc-eager shift-reduce ( <ref type="bibr" target="#b0">Ballesteros and Carreras, 2015)</ref> and <ref type="formula">(3)</ref> arc-standard shift-reduce ( <ref type="bibr" target="#b8">Hayashi et al., 2016)</ref> algorithms. This paper uses the arc-standard shift-reduce algorithm since it provides a more simple implementation. A transition system for spinal TAG parsing is the tuple S = (C, T, I,C t ), where C is a set of con- figurations, T is a set of transitions, which are par- tial functions t : C ⇀ C, I is a total initialization function mapping each input string to a unique configuration, and C t ⊆ C is a set of terminal con- figurations. A configuration is the tuple (α, β , A) where α is a stack of stack elements, β is a buffer of elements from an input, and A is a set of parser operations. A stack element s is a pair (s, j) where s is a spine and j is a node index of s. We refer to s and j of s as s.s and s. j, respectively.</p><p>Let x = ⟨w 1 /t 1 , . . . , w n /t n ⟩ (∀i ∈ <ref type="bibr">[1, n]</ref>, w i ∈ T and t i ∈ PT ) be a pos-tagged input sentence. The arc-standard transition system by <ref type="bibr" target="#b8">Hayashi et al. (2016)</ref> can be defined as follows: its initialization function is</p><formula xml:id="formula_3">I(x) = ([], [w 1 /t 1 , . . . , w n /t n ], / 0), its set of terminal configurations is C t = ([], [], A)</formula><p>, and it has the following transitions:</p><p>1. for each s ∈ LS with s(0) = w i and s(1) = t i , a shift transition of the form (α, w i /t i |β , A) ⊢ (α|s 1 , β , A) where s 1 = (s, 2) 2 ;</p><p>2-3. for each j with s 1 . j ≤ j &lt; ht(s 1 .s), a sister adjunction left transition of the form</p><formula xml:id="formula_4">(σ |s 2 |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 2 .s ▷ ⃝ j s 1 .s})</formula><p>and a regular adjunction left transition of the form</p><formula xml:id="formula_5">(σ |s 2 |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 2 .s ▶ ⃝ j s 1 .s})</formula><p>where s ′ 1 = (s 1 .s, j); 4-5. for each j with s 2 . j ≤ j &lt; ht(s 2 .s), a sister adjunction right transition of the form</p><formula xml:id="formula_6">(σ |s 2 |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 2 .s ◁ ⃝ j s 1 .s})</formula><p>and a regular adjunction right transition of the form</p><formula xml:id="formula_7">(σ |s 2 |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 2 .s ◀ ⃝ j s 1 .s})</formula><p>where s ′ 1 = (s 2 .s, j);</p><p>6. a finish transition of the form  </p><formula xml:id="formula_8">([s], [], A) ⊢ ([], [], A).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Empty Element Recovery</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Spinal TAG with Empty Elements</head><p>In this paper, we redefine the spinal TAG as G = (N, PT, T, LS, *e*, ET, ES), where *e* is a special word, ET is a set of empty categories, and ES is a set of empty spines. An empty spine s = n 0 → n 1 → · · · → n k−1 → n k (k ∈ N) has the same form as lexical spines, but n 0 = *e* and n 1 ∈ ET . The height and label definitions are also the same as those of lexical spines. For example, the rightmost spine s = *e* → *T* → ADVP in <ref type="figure" target="#fig_0">Figure 1 (b)</ref> is an empty spine with ht(s) = 3 and s(1) = *T*. This paper extends empty spines to allow the use of phrasal constituents that consist of only empty elements, as a single spine. A phrasal empty spine is a tuple (t, h), where t is a sequence of (phrasal) empty spines specifying some sister adjunctions between these spines and h is a head spine in t. The phrasal empty spine in <ref type="figure" target="#fig_3">Figure 3</ref> consists of two empty spines *e* → 0 and *e* → *T* → S → SBAR, where a sister adjunction left is performed at the SBAR node of the latter spine, which is a head spine in the phrase. To ap- ply parser operations to a phrasal empty spine, we use its head spine rather than itself. This paper de- fines the height and label of a phrasal empty spine as those of its head spine.</p><p>To recover empty elements, this paper intro- duces two additional operations, insert and com- bine, both of which have left and right types. <ref type="figure" target="#fig_2">Fig- ures 2 (c) and (d)</ref> show insert left and combine right operations. These operations are similar to sister adjunctions in that the former simply inserts some phrasal empty spine into some node of an- other spine and the latter also inserts a spine into some node of a phrasal empty spine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">New Transitions</head><p>To handle empty spines in parsing process, we add the following five transitions to the arc-standard transition system of ( <ref type="bibr" target="#b8">Hayashi et al., 2016</ref>):</p><p>7-8. for each s ∈ ES and each j with s 1 . j ≤ j &lt; ht(s 1 .s), an insert left transition of the form</p><formula xml:id="formula_9">(σ |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s ▷ ⃝ j s 1 .s})</formula><p>and an insert right transition of the form</p><formula xml:id="formula_10">(σ |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 1 .s ◁ ⃝ j s})</formula><p>where s ′ 1 = (s 1 .s, j); 9-10. for each s ∈ ES and each j with 2 ≤ j &lt; ht(s), a combine left transition of the form</p><formula xml:id="formula_11">(σ |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s 1 .s ▷ ⃝ j s})</formula><p>and a combine right transition of the form</p><formula xml:id="formula_12">(σ |s 1 , β , A) ⊢ (σ |s ′ 1 , β , A ∪ {s ◁ ⃝ j s 1 .s})</formula><p>where s ′ 1 = (s, j); 11. an idle transition of the form (σ |s 1 , β , A) ⊢ (σ |s 1 , β , A);</p><p>Like unary and idle rules in shift-reduce CFG parsing ( <ref type="bibr" target="#b16">Zhu et al., 2013</ref>), our current system pro- hibits &gt; b consecutive actions consisting of only insert, combine and idle operations. Given an input sentence with length n, after performing n shift, n − 1 adjunction, b · (2n − 1) {insert, com- bine or idle} actions, the system triggers the finish action and terminates. For training, we make ora- cle derivations using the stack-shortest strategy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>To realize empty element recovery, other lexical- ized TAG formalisms ( <ref type="bibr" target="#b4">Chen and Shanker, 2004;</ref><ref type="bibr" target="#b13">Shen et al., 2008</ref>) attach some or all empty el- ements directly to surface word lexicons. Our framework, however, uses spinal TAG parser op- erations as they provide more efficient parsing and more compact sets of lexicons. It is remarkable that this paper is the first study to present a shift- reduce spinal TAG parsing algorithm to recover empty elements. Recent work has shown that empty element re- covery can be effectively solved in conjunction <ref type="table">Tagger   Lattice Proposed  M  O M O M  O  Gold   *ICH*  2  5  2  2 31  43  78  *RNR*  0  3  0  4  4  5  6  *EXP* 10 12  0  0 19  26  30   Table 2</ref>: Result Analysis: M denotes the number of matches of system outputs (O) with the gold. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Experiments on the English Penn Treebank</head><p>We used the Wall Street Journal (WSJ) part of the English Penn Treebank: Sections 02-21 were used for training, Section 22 for development, and Sec- tion 23 for testing. We annotated trees with heads by treep (Chiang and Bikel, 2002) 3 with the appli- cation of Collins's head rules. The 78524 lexical and 115 phrasal empty spine types were obtained from the training data 4 . The set of phrasal empty spines covered all phrasal empty spines extracted from the development data. We used the Stanford part-of-speech tagger to tag development and test data. To train the pro- posed parsing model, we used the violation-fixing 3 http://www3.nd.edu/ ˜ dchiang/software/ treep/treep.html 4 Excluding words from lexical spines, there were 1080 lexical spine types. <ref type="bibr">Typed-empty (t,i,i)</ref> All Brackets P R F1 P R F1</p><p>Rule 57.4 50.5 53.7 - - - Takeno15 60.4 50.6 55.1 - - -  <ref type="table">Table 3</ref>: Results on the Japanese Keyaki Treebank. perceptron algorithm ( <ref type="bibr" target="#b10">Huang et al., 2012</ref>). For training and testing, we set beam size to 16 and max count b, introduced in Section 4.2, to 2. For comparison with other systems in our environ- ment, we also implemented two systems:</p><p>• Lattice is a method by <ref type="bibr" target="#b2">Cai et al. (2011)</ref>. We also used blatt 5 , which is an extension of the Berkeley parser, to parse word lattices in which the special word *e* is encoded as de- scribed in <ref type="bibr" target="#b2">(Cai et al., 2011</ref>).</p><p>• Tagger decides whether some empty cate- gory is inserted at the front of a word or not, with regularized logistic regression. To sim- plify point-wise linear tagging, we combined empty categories, those that appeared in the same position of a sentence, into a single cat- egory: thus the original 10 empty types in- creased to 63. <ref type="table">Table 1</ref> shows final results on Section 23. To evaluate the accuracy of empty element recov- ery, we calculated precision, recall and F1 scores for (1) Labeled Empty Bracket (X/t,i,i), (2) La- beled Empty Element (t,i,i), and (3) All Brack- ets, where X ∈ NT , t ∈ ET and i is a posi- tion of the empty element, using eevalb 6 . The results clearly show that our proposed method significantly outperforms the other systems. Ta- ble 2 shows the main reason for the improvement achieved by our method. The *ICH*, *RNR* and *EXP* empty types are used to show the relation between non-adjacent constituents, caused by syn- tactic phenomena like Extraposition and Conjunc- tion. Our method captures such complex relations better with the help of the syntactic feature rich- ness. <ref type="table">Table 1</ref> reports the scores for non-empty brack- ets to examine whether the joint method improves the standard PARSEVAL scores. While the Lattice Johnson (X/t,i,i) <ref type="bibr">Typed-empty (t,i,i)</ref> All <ref type="table">Brackets  Non-empty Brackets  P  R  F1  P  R  F1  P  R  F1  P  R  F1   Schmid06  - - - 87.9 83.0 85.4  - - - - - - Cai11 90.1</ref>   <ref type="table">Table 1</ref>: Results on the English Penn Treebank (Section 23): to calculate the scores for Tagger, we obtained a parse tree by supplying the 1-best Tagger output with the Berkeley parser trained on Sections 02-21 including empty elements (using the option "-useGoldPOS").</p><p>method was less accurate than the vanilla Berke- ley parser, the performance of our method could be maintained with little loss in parsing accuracy. <ref type="figure" target="#fig_4">Figure 4</ref> shows the parse time in seconds for each test sentence and that our empty element recovery parser works in reasonable time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Experiments on the Japanese Keyaki Treebank</head><p>Finally, to show that our method works well on other languages, we conduct experiments on the Japanese Keyaki Treebank ( <ref type="bibr" target="#b1">Butler et al., 2012)</ref>. For this data, we modified blatt to keep function labels And, in order to consider segmentation er- rors, we also modified eevalb to calculate not word but character span in a sentence. We follow the ex- periments in ( <ref type="bibr" target="#b14">Takeno et al., 2015)</ref> and show the re- sults in <ref type="table">Table 3</ref>. Our method significantly outper- forms the state-of-the-art post-processing method in Japanese.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>Using spinal parsing for the joint recovery of empty elements achieves state-of-the-art perfor- mance in standard English and Japanese datasets. We plan to extend our work to recover trace-filler and frame semantic structures using the PropBank data.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: (a) an example of a constituent tree with head annotations denoted by-H; (b) spinal elementary trees extracted from the parse tree (a).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>.</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An example of parser operations: (a) sister adjunction left (b) regular adjunction right (c) insert left (d) combine right.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: A phrasal empty spine shown on the shaded region.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Scatter plot of parsing time against sentence length, comparing with Hayashi16, Berkeley and Cai11 parsers.</figDesc></figure>

			<note place="foot" n="1"> After adjunctions, the result forms a phrase consisting of several spines. If a phrasal spine is also used in adjunction operations as Figure 2 (b), we treat it as a lexical spine by referring to its head spine.</note>

			<note place="foot" n="2"> To construct a full parse tree from A, our actual implementation attaches index i to spine s after shift transition.</note>

			<note place="foot" n="5"> http://www.cs.bgu.ac.il/ ˜ yoavg/ software/blatt/ 6 http://www3.nd.edu/ ˜ dchiang/software/ eevalb.py</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors would like to thank the anonymous reviewers for their valuable comments and sug-gestions to improve the quality of the paper. This work was supported in part by JSPS KAKENHI Grant Number <ref type="bibr">26730126.</ref> </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Transitionbased spinal parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ballesteros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Carreras</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of CoNLL</title>
		<meeting>of CoNLL</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Keyaki treebank: phrase structure with functional information for japanese</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Butler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hotta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Otomo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yoshimoto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Text Annotation Workshop</title>
		<meeting>of Text Annotation Workshop</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Languageindependent parsing with empty elements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL-HLT</title>
		<meeting>of ACL-HLT</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="212" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">TAG, dynamic programming, and the perceptron for efficient, feature-rich parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Carreras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Koo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of CoNLL</title>
		<meeting>of CoNLL</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Automated extraction of tags from the penn treebank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">K</forename><surname>Shanker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New developments in parsing technology</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="73" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Recovering latent information in treebanks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Bikel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of COLING</title>
		<meeting>of COLING</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Deep syntactic processing by combining shallow methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dienes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dubey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="431" to="438" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fully parsing the penn treebank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gabbard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Marcus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kulick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NAACL-HLT</title>
		<meeting>of NAACL-HLT</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="184" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Shiftreduce spinal tag parsing with dynamic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hayashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Suzuki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nagata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions of the Japanese Society for Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Dynamic programming for linear-time incremental parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sagae</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1077" to="1086" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Structured perceptron with inexact search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fayong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NAACL</title>
		<meeting>of NAACL</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="142" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A simple pattern-matching algorithm for recovering empty nodes and their antecedents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="136" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Trace prediction and recovery with unlexicalized pcfgs and slash features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Schmid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of COLING-ACL</title>
		<meeting>of COLING-ACL</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="177" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Ltagspinal and the treebank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Champollion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Joshi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Language Resources and Evaluation</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="19" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Empty category detection using path features and distributed case frames</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Takeno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nagata</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yamamoto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of EMNLP</title>
		<meeting>of EMNLP</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1335" to="1340" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Enlisting the ghost: modeling empty categories for machine translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="822" to="831" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast and accurate shift-reduce constituent parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACL</title>
		<meeting>of ACL</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="434" to="443" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
